# /var/kerberos/krb5kdc/kdc.conf
#   Kerberos Domain Controller configuration file
#   Aspiring to be written in the the PostgreSQL documentation style: clear and consise
#
#   2025-02-12  George Marselis <george@marsel.is>
#
# STRUCTURE
#   The kdc.conf file is set up in the Microsoft Windows .ini format, same as the krb5.conf(5)
#
# SECTIONS
#   A kdc.conf file may contain the following sections:
#
#       [kdcdefaults]  # Settings used by the Kerberos V5 library
#       [realms]       # Per-realm-specific database configuration and settings
#       [dbdefaults]   # Default database settings
#       [dbmodules]    # Per-database settings
#       [logging]      # Control how the krb5kdc(8) and kadmind(8) daemons and the kdb5_util(8) perform logging
#       [otp]          # One-time password settings
#
##########################################################################
# VARIABLES FOR EACH SECTION AND THEIR VALUES 
##########################################################################
#
#   A sensible setup example is included at the end of the commentary, after FURTHER DISCUSSION
#
#[kdcdefaults]         # Settings used by the Kerberos V5 library
#
#   Most of the variables introduced here have a per-realm definition. We list some of the shared ones here because it is
#   an easy way to understand the minimum setup required for a single realm setup at a glance, though the description
#   here is very much abridged. If you need the full explaination, go look them up in the [realms] section. We follow
#   the format of kdc.conf(5) in that regard. 
#
#       host_based_services = host,nfs,ssh              # List of services which have to accept a kerberos ticket for the connection to succeed.
#       kdc_listen          = *:88                      # Specify the UDP addresses and/or ports for the `/usr/sbin/krb5kdc` daemon (the  Kerberos Key Distribution Center daemon).
#       # kdc_ports                                     # Older naming for kdc_listen, now serves as alias if kdc_listen is not set
#       kdc_tcp_listen      = *:88                      # Specify the TCP addresses and/or ports for the `/usr/sbin/krb5kdc` daemon (the  Kerberos Key Distribution Center daemon).
#       # kdc_tcp_ports                                 # Older naming for kdc_listen, now serves as alias if kdc_listen is not set
#       no_host_referral    = example.is,example.com    # Disable ticket referals to this list of hosts
#       restrict_anonymous_to_tgt  = true               # Useful only for very restricted setups like policy queries allowed to anonymous users, such as querying the KDC for
#                                                       # password policies (e.g., minimum length, expiration rules) without authenticating to a real service. 
#
#   The following three variables are an exception. They do not have a per-realm definition, so we 
#   will explain them here:
#
#       kdc_max_dgram_reply_size = _4096_ (4096)        #   Specify the maximum packet size to be sent over UDP. Defaults to 4096 bytes.
#       kdc_tcp_listen_backlog   = 5                    #   Set the size of the listen queue length for the KDC daemon. The value may be limited by OS settings. Defaults value to 5.
#                                                       #
#       spake_preauth_kdc_challenge = edwards25519      #   SPAKE (Simple Password Exponential Key Exchange) is a pre-authentication mechanism in Kerberos that improves
#                                                       #   security by preventing password brute-force attacks while allowing password-based authentication. 
#                                                       #   `spake_preauth_kdc_challenge controls` whether the KDC will try to send preemptively send a pre-authentication challenge
#                                                       #   assuming the client supports it, to avoid extra round-trips. That's called "optimisticic challenge".
#                                                       #   This can speed up authentication but may expose unnecessary data if the client does not support SPAKE. The value set here
#                                                       #   must match one of the available SPAKE groups defined in `spake_preauth_groups` under [libdefaults]. Possible values include:
#                                                       #       edwards25519, p256, p384, p521, ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, and ffdhe8192. 
#                                                       #   If not set, the KDC does not issue an optimistic challenge by default.
#
#[realms]              # Per-realm-specific database configuration and settings
#   The following variables can exist both in [kdcdefaults] and in a realm definition. Duplicating here for completeness. See further below for full commentary.
#       host_based_services
#       kdc_listen
#       # kdc_ports
#       kdc_tcp_listen
#       # kdc_tcp_ports
#       no_host_referral
#       restrict_anonymous_to_tgt
#
#   Each tag in the [realms] section is the name of a Kerberos realm. The value of the tag is a subsection where the
#   relations define KDC parameters for that particular realm. The following tag  shows how to define all parameters
#   for the EXAMPLE.COM realm. Follow it through until you reach the "# } # end of EXAMPLE.COM realm" tag, some 400
#   lines below.
#
# EXAMPLE.COM = {
#   acl_file = /var/kerberos/krb5kdc/example.com-kadm5.acl
#                                                       #   Specify the file that controls which Kerberos principals have what permissions# on the Kerberos database. If you run multiple
#                                                       #   realms, it is a good idea to insert the name of the realm in the file. Defaults to "/var/kerberos/krb5kdc/kadm5.acl" . 
#                                                       #   Setting it to "" disables ACL enforcement. If you need more info on how to administer Kerberos ACLs, look at kadm5.acl for
#                                                       #   more information
#                                                       #
#                                                       #   NOTE: It is technically feasible for multiple domains to share an ACL file.
#                                                       #       In such a case, careful management of permissions is essential to prevent conflicts.
#                                                       #
#   database_module = DB2_EXAMPLE.COM                   #   The value of database_module can be anything, but historically it is something like <type>.<realm> in uppercase. 
#                                                       #   Take five minutes and read bellow at FURTHER DISCUSSION: KERBEROS STORAGE BACKENDS for more information on backends before
#                                                       #   choosing one.
#                                                       #
#   database_name = /var/kerberos/krb5kdc/principal     #   The path to the db2 database. It is set here in case it is not set in the label in [dbmodules]
#                                                       #   Someone understood they fucked up with the configuration order and they tried to fix it
#                                                       #   but got overruled and the change made it worse. Can be used as a falback or explicit override.
#                                                       #   Deprecated.
#                                                       #
#   default_principal_expiration = 2025-12-31           #   Provide a safety mechanism to enforce automatic principal expiration if admins forget to set an expiration date manually.
#                                                       #   It is useful for enforcing security policies, such as periodic credential rotation or deactivating temporary accounts.
#                                                       #   The default_principal_expiration setting in kdc.conf only affects principals created after this variable is set. When set and
#                                                       #   a new principal is created without an explicit expiration date, the KDC assigns the expiration date specified by default_principal
#                                                       #   _expiration. Existing principals are not affected by changes to this setting; their expiration dates remain unchanged unless
#                                                       #   specifically modified using administrative tools like kadmin with the modprinc command. If default_principal_expiration is set
#                                                       #   to a date before the date where the configuration is set, any newly created principal without an explicit expiration date will
#                                                       #   be immediately considered expired and unusable. It will exist in the database but cannot obtain tickets because its expiration
#                                                       #   date has already passed.
#                                                       #
#                                                       #   If a principal's expiration date is past, running kadmin.local: getprinc <principal> will show something like:
#                                                       #       `Expiration date: 2025-03-31`
#                                                       #   If the date is past, any attempt to obtain a ticket with kinit will fail with:
#                                                       #       `kinit: Client's entry in database has expired while getting initial credentials`
#                                                       #
#   default_principal_flags = +allow-tickets,+forwardable,+preauth,+proxiable,+renewable,+service,+tgt-based,-dup-skey,-hwauth,-no-auth-data-required,-ok-to-auth-as-delegate,-postdateable,-pwchange,-pwservice
#                                                       #   Comma-separated list of flags, with '+' and '-' before each flag to signify enable and disable. Specify
#                                                       #   the default attributes of principals created in this realm. 
#                                                       #   Defaults to +postdateable, +forwardable, +tgt-based, +renewable, +proxiable, +dup-skey, +allow-tickets and +service.
#                                                       #
#                                                       # If set:
#                                                       #   allow-tickets
#                                                       #       Disabling this flag means new principals in this realm will be created (manually or scripted) without the ability to issue
#                                                       #       tickets. It is a way to enforce manual activation of new principals, as the KDC will reject ticket requests, even if the
#                                                       #       credentials are correct. Kerberos handles authentication, not authorization. If allow-tickets is false, the KDC authenticates
#                                                       #       you (valid password), but will not issue a TGT, so you cannot access services.
#                                                       #
#                                                       #   dup-skey
#                                                       #       Allow a service to create a new ticket with the same session key as the original. Used for protocols needing matching keys
#                                                       #       on both client and service sides (e.g., encrypted tunnels). Example: In Kerberos-authenticated IPsec, a gateway may request
#                                                       #       a ticket with dup-skey so both ends share the same session key, ensuring symmetric encryption. The KDC issues both tickets
#                                                       #       with the same session key when dup-skey is used. Both tunnel endpoints get tickets from the KDC. Not commonly used outside
#                                                       #       such low-level encrypted channel setups.
#                                                       #
#                                                       #   forwardable
#                                                       #       Allow obtaining forwardable tickets. A forwardable ticket allows the TGT to be sent to another host, which can then use it
#                                                       #       to request service tickets on behalf of the use. Example: 1. You ssh user@hostA with GSSAPIAuthentication 2. HostA receives
#                                                       #       your TGT. 3. From HostA: ssh hostB — your TGT is forwarded and used to auth to hostB, without the use of any public key in 
#                                                       #       HostA forwarded to HostB or any keys on HostB. No ssh agents are involed either, only Kerberos TGT forwarding via GSSAPI.
#                                                       #
#                                                       #   hwauth
#                                                       #       Enabled, the principal is required to preauthenticate using a hardware device (e.g., smartcard, biometric) before receiving
#                                                       #       any tickets. Example: Insert smartcard into a provided card slot, then type your password for KDC to mark the ticket it give
#                                                       #       you as +hwauth. Removing the card does not affect any TGT already issued; it stays valid until expiry. It also up the client
#                                                       #       host to handle its behavior on removal of the hardware token - KDC has no mechanism to respond to that.
#                                                       #
#                                                       #   no-auth-data-required
#                                                       #       Enabling this flag prevents PAC or AD-SIGNEDPATH data from being added to service tickets for the principal. Used mainly by
#                                                       #       Windows/Kerberos for access control decisions. Typical PAC adds ~1–4 KB to the ticket, depending on user/group info. Without
#                                                       #       PAC, tickets can be less than 500 bytes. Used in anon services, old clients, or minimalistic setups. Modern Windows expects
#                                                       #       PAC in tickets for proper authz.
#                                                       #
#                                                       #   ok-as-delegate
#                                                       #       This one is a pretty long explaination. You should look it up at the end of this conf file under "Further discussion", but
#                                                       #       the basic thing is that it was a Microsoft Server 2003 extention to Kerberos, created by Microsoft and backported to Kerberos
#                                                       #       around version 1.11, released around October 2012.
#                                                       #
#                                                       #       The besic idea behind ok-as-delegate and ok-to-auth-as-delegate were created as kerberos extensions by microsoft,
#                                                       #       to proxy auth from web apps to backend systems or at least web-adjacent system. Kerberos itself is not friendly to corporate
#                                                       #       firewalls, so it is not easy for a web app to directly use it cuz it might be blocked. So, we auth via the app, the app gets
#                                                       #       a ticket from kerberos and then uses the ticket for everything else. But you still have to allow applications to "impersonate"
#                                                       #       a user to log in as them. Similarly, applications need to be told in the datagram if they are allowed to delegate authentication
#                                                       #       or not.
#                                                       #           "Do enough engineering work so that the Kerberos protocol becomes the default authentication protocol that is used behind
#                                                       3            corporate firewalls, independent of the protocol that is used at the Web server authentication tier to authenticate the
#                                                       #            Internet user."
#                                                       #           https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc759501(v=ws.10)
#                                                       #       The delegation here is nothing special; it is essentially the forward flag set, saying "use my name when you trying to log in"
#                                                       #       Should had been named as: delegation-permitted
#                                                       #
#                                                       #   ok-to-auth-as-delegate
#                                                       #       This one is a pretty long explaination. You should look it up at the end of this conf file under "Further discussion", but
#                                                       #       the basic thing is that it was a Microsoft Server 2003 extention to Kerberos, created by Microsoft and implemented later by 
#                                                       #       MIT Kerberos as well, around version 1.14, released around March 2014.
#                                                       #       
#                                                       #       The basic idea behind ok-to-auth-as-delegate is to explicitly (but conditionally) mark which services are trusted to receive
#                                                       #       user credentials for onward delegation. Without it, a service cannot impersonate the user, even if the client forwards credentials.
#                                                       #       The flag was introduced by Microsoft as part of their Kerberos extensions to support constrained delegation in their Kerberos
#                                                       #       proxying service over the web (S4U2Proxy). See CONSTRAINED DELEGATION at the end of the file.
#                                                       #       
#                                                       #       This was necessary in the ecosystem of Microsoft where services like web apps (IIS, SharePoint) need to access backend systems
#                                                       #       (SQL, SMB) on behalf of a user, but without blindly trusting every front-end. So Microsoft split the delegation trust into two
#                                                       #       parts: one in the principal (ok-to-auth-as-delegate) and one in the ticket (ok-as-delegate), to enforce tighter policy controls.
#                                                       #       In essence, ok-to-auth-as-delegate means "this service is trusted to use the identity of a user to access other services" but
#                                                       #       only if the KDC decides it is allowed. It is not real impersonation control — it is just permission to let the delegation
#                                                       #       state machinery activate.
#                                                       #       Should had been named as: allow-receive-delegation
#                                                       #       
#                                                       #   postdateable
#                                                       #       Allow the ticket to be  be issued with a start time in the future. This allows the ticket to be issued befroe it's valid-from
#                                                       #       time. Useful in belayed-start jobs, like batch processing or scheduled logins.
#                                                       #   
#                                                       #   preauth
#                                                       #       Require the user enter their password. before the KDC issues a Ticket Granting Ticket (TGT). This prevents offline password
#                                                       #       guessing by forcing the user to verify their identity. Otherwise, the KDC can send encrypted replies without verifying first
#                                                       #       the identity of the client requesting the Ticket Granting Ticket, which is a major security hole.
#                                                       #       If required and not provided, KDC replies with PREAUTH_REQUIRED
#                                                       #
#                                                       #   proxiable
#                                                       #       Allow obtaining tickets which can be used by a service to request a new ticket on behalf of a user for a different service.
#                                                       #       It enables delegation across different services, not just the initial one. For example, a batch job scheduler 
#                                                       #       E.g. Slurm gets a TGT for a job submitted by a user, allowing it to request service tickets on behalf of the user to
#                                                       #       access windows shares on other data storage devices.
#                                                       #
#                                                       #   pwchange
#                                                       #       Enable the ability to flag a ticket only valid for changing the password of the stated principal. Issued by KDC when the
#                                                       #       password is expired and only allows access to the kadmin/changepw service. No access to other services until password is
#                                                       #       updated. This means new principals are created with the "must change password at first login" flag set. Used to enforce
#                                                       #       initial password rotation by default.
#                                                       #
#                                                       #   pwservice
#                                                       #       Allow the principal to access the password change service. Used when issuing a TGT with pwchange — it restricts access to
#                                                       #       only this service, but rarely changed unless you have set up some custom password service routing.
#                                                       #
#                                                       #   renewable
#                                                       #       Enable the ability for principals to obtain renewable tickets, therefore a ticket can be renewed (i.e., its lifetime extended)
#                                                       #       without the user re-authenticating. Used in long-running jobs or when you want to avoid frequent password prompts.
#                                                       #       A renewable ticket has two timers: endtime: short initial validity (e.g., 10h) and renew-till: max renewal window (e.g., 7d)
#                                                       #       You must renew before endtime, within the renew-till window, by using manually (e.g., via kinit -R) or by tools like k5start,
#                                                       #       krb5-auth-dialog, or system daemons. Kerberos does not auto-renew tickets itself.
#                                                       #
#                                                       #   service
#                                                       #       Enable the ability to mark newly created principals as service principals, i.e. not users. This disables password expiry and
#                                                       #       preauth by default. Common for host/, HTTP/, etc. Useful when using kadmin to define principals for daemons or hosts and the
#                                                       #       they are expected to manage their own credentials without user input.
#                                                       #
#                                                       #   tgt-based
#                                                       #       Enable the ability for service principals to obtain a Ticket Granding Ticket (TGT) using the keytab of the service, enabling
#                                                       #       it to act like a user in certain workflows, like Kafka Connect or Flume pulling data from a kerberized Hadoop Distributed File
#                                                       #       System. `+tgt-based` is for active clients, not passive services, like Apache, IMAP, SMTP or any service which accepts and
#                                                       #       validates Kerberos tickets but does not request tickets or obtain TGTs themselves.
#                                                       #
#  dict = /usr/share/dict/words                         #   Location of the dictionary file containing strings that are not allowed as passwords. One string per line, no whitespace. If not
#                                                       #   specified, no password checking is done. Used to blacklist specific words, typically offensive or undesirable terms or very 
#                                                       #   generic weak passwords. All passwords containing any of the words are rejected.
#                                                       #       `dnf install words` to install the dictonary
#                                                       #
#  disable_pac = true | false (false)                   #   PAC (Privilege Attribute Certificate) is a Microsoft Kerberos extension carrying authorization data: User SID, group memberships,
#                                                       #   and logon info such as logged-on time, logged-on domain name, user account name, user display name, profile path, home directory
#                                                       #   user account control flags (such as password expired), and other user session creation, auditing and policy enforcement flags used
#                                                       #   by AD-integrated services/environments. Services can query LDAP/AD directly for full user info but PAC stuffs common fields into
#                                                       #   the ticket for fast, offline evaluation.
#                                                       #   So, turn this on by setting it to `false`, if you got any daemons that use kerberos and windows or your machine is integrated into
#                                                       #    Active Directory. Yes, it is an idiotic naming and setting.
#  encrypted_challenge_indicator = pkinit-hw | smartcard | mfa | ... | NULL
#                                                       #   Piss-poor named variable. It is just an sysadmin-defined string label inserted into the ticket to indicate the encrypted challenge
#                                                       #   method used: hardware key, smartcard or mfa, though there are no default string values for this variable. If you do not have any
#                                                       #   hardware key, the preauth path is not used, so the label inserted into the packet will be NULL. The reason this exists is to allow
#                                                       #   the receiving end to decide if the authentication proceeded as policy dictates: Was a smartcard used to sign into the VPN? Yes? go
#                                                       #   ahead. No? log that and deny access. Similarly for sudo or any kind of privilledge elevation. It is policy metadata passed from the
#                                                       #   KDC.
#                                                       #       Better name would be: auth_hw_used
#                                                       #
#   host_based_services = host ftp nfs ... | host,ftp,nfs ...
#                                                       #   List of service prefixes for which the KDC will automatically add hostnames to form Service Principal Names (SPNs). Whitespace or
#                                                       #   comma seperated list. If a service is listed here, the KDC can issue referral tickets for the remote service; The remote service
#                                                       #   must accept the referral ticket for authentication to succeed.
#                                                       #   This allows the KDC to recognize the principle host/foo.example.com@REALM as valid for the host-level logins (e.g., SSH, login, su,
#                                                       #   ftp, nfs or any other service). So, as an example:
#                                                       #       If host_based_services = host, then when a client asks for host/foo@REALM, the KDC will:
#                                                       #           * Recognize host as a known service
#                                                       #           * Accept service@hostname because service matches
#                                                       #           * Resolve it to host/foo@REALM automatically, even if not explicitly listed in the DB
#                                                       #           * Issue a TGT so you can ssh/rlogin/whatever interactive login to the respective service
#                                                       #       Essentially the KDC will accept the match, because of the service, even if even if the principal was not explicitly created
#                                                       #       for foo. This allows for flexible matching based on hostname.
#                                                       #
#   iprop_enable = _true_ | false (false)               #   Enable the incremental propagation of kerberos data to secondary KDCs. Used in HA setups to replicate backend DB updates from the
#                                                       #   primary to the secondary KDCs via `/usr/sbin/kpropd` . if set to false, propagation uses full dumps via kprop, not incremental
#                                                       #   updates. Secondary KDCs must periodically pull entire database copies. Usually, the database is small: even for large realms, say
#                                                       #   10k+ principals, rarely exceeds 50-100MB. Still, incremental (iprop) is preferred for latency and frequent updates. With 
#                                                       #   `iprop_enable = true`, each principal update triggers an incremental change log entry. Secondaries pull these deltas via kpropd
#                                                       #   regularly (e.g., every few seconds). Faster, lower overhead than full DB dumps. The log propagation is encrypted with Kerberos.
#                                                       #       Log propagation happens using two tools: `/usr/sbin/kadmind` kadmind listens for connections to serve updates; 
#                                                       #       `/usr/sbin/kpropd` on secondary KDCs connects to `/usr/sbin/kadmind` on the primary to pull logs.
#                                                       #
#   iprop_ulogsize = 1000 (1000)                        #   Set the max number of update records in the iprop update log. Controls how many changes can be stored for incremental propagation
#                                                       #   before requiring a full resync. While with iprop full resyncs are rare under normal operation, if a secondary misses too many
#                                                       #   updates (exceeds iprop_ulogsize), a full resync is triggered.
#                                                       #   More entried means better resilience against delays, but it also means that iprop uses more memory and disk resources.
#                                                       #   Up to release 1.11, the default value was 2500.
#                                                       #
#   iprop_master_ulogsize = 1000 (1000)                 #   The original name for `iprop_ulogsize` before release 1.19. Used as an alias now when `iprop_ulogsize` is not set.
#                                                       #
#   iprop_replica_poll = 2m (2m)                        #   Delta time string. Specify how often the replica KDC polls for new updates from the primary. The default value is 2m (two minutes).
#                                                       #
#   iprop_slave_poll = 2m (2m)                          #   The original name for `iprop_replica_poll` prior to release 1.17. Used as an alias now when `iprop_slave_poll` is not set.
#                                                       #
#   iprop_listen = _*_ _*:iprop_port_ interface 0.0.0.0:_754_ [::]:_754_ | _*_,_*:iprop_port_,interface,0.0.0.0:_754_,[::]:_754_
#                                                       #   Specify the addresses and/or ports for the `/usr/sbin/kpropd` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in iprop_port. If neither iprop_listen nor iprop_port are
#                                                       #   specified, iprop_listen defaults to *:* and binds to port 754 (the compiled-in default). If kpropd fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #
#   iprop_port = _754_ (754)                            #   The original name for `iprop_listen` before release 1.15 . Used as an alias now when `iprop_listen` is not set.
#                                                       #
#                                                       #   The 754 value is set as defined in /etc/services as krb5_prop, so the MIT Kerberos distribution is once more full of inconsistencies.
#                                                       #
#   iprop_resync_timeout = 5m (5m)                      #   Delta time string specifying the amount of time to wait for a full propagation to complete. Used only by secondary KDCs. If
#                                                       #   `iprop_resync_timeout` expires, the secondary KDC gives up trying to complete the full resync and logs an error; replication
#                                                       #   halts until retried.
#                                                       #
#   iprop_logfile = /var/kerberos/krb5kdc/iprop_log | _`database_name`.ulog_ (`database_name`.ulog) 
#                                                       #   Specify where the update log file for the realm database is to be stored. Defaults to `database_name`.ulog . If `database_name`
#                                                       #   is not set, the KDC hardcodes its own default (e.g., /var/kerberos/krb5kdc/iprop_log) and ignores any [dbmodules] settings, even
#                                                       #   if your database is LDAP or customized.
#                                                       #   
#   kadmind_listen = _*_ _*:749 interface 0.0.0.0:_749_ [::]:_749_ | _*_,_*:749_,interface,0.0.0.0:_749_,[::]:_749_
#                                                       #   Specify the address and/or ports for the `/usr/sbin/kadmind` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kadmind_port. If neither kadmind_listen nor kadmind_port are
#                                                       #   specified, kadmind_listen defaults to *:* and binds to port 749 (the compiled-in default). If kadmind fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #
#   kadmin_port = _749_ (749)                           #   The original name for `kadmind_listen` before release 1.15 . Used as an alias now when `kadmind_listen` is not set.
#                                                       #
#                                                       #   The 749 value is set as defined in /etc/services as kerberos-adm, so the MIT Kerberos distribution is once more full of inconsistencies.
#                                                       #
#   key_stash_file = _/var/kerberos/krb5kdc/.k5.$REALM_ ( /var/kerberos/krb5kdc/.k5.$REALM )
#                                                       #   Set the location of the KDC database master key, used to encrypt keys stored in the Kerberos DB. $REALM, here, is the name of the realm
#                                                       #   in uppercase.
#                                                       #
#   kdc_listen = _*_ _*:kdc_ports_ interface 0.0.0.0:_88_ [::]:_88_ | _*_,_*:kdc_ports_,interface,0.0.0.0:_88_,[::]:_88_
#                                                       #   Specify the UDP address and/or ports for the `/usr/sbin/krb5kdc` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kdc_ports. If neither kdc_listen nor kdc_ports are
#                                                       #   specified, kadmind_listen defaults to *:* and binds to port 88 (the compiled-in default). If krb5kdc fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #
#   kdc_ports = _88_,*750* (88)                         #   The original name for `kdc_listen` before release 1.15 . Used as an alias now when `kdc_listen` is not set.
#                                                       #   Port 750 was the original default port for the Kerberos Key Distribution Center (KDC) in MIT Kerberos 4.
#                                                       #   In modern Kerberos 5 implementations, port 88 is the standard. Some configurations still include 750
#                                                       #   for legacy compatibility, but it is rarely needed today.
#                                                       #
#   kdc_tcp_listen = _*_ _*:kdc_tcp_port_ interface 0.0.0.0:_88_ [::]:_88_ | _*_,_*:kdc_tcp_ports_,interface,0.0.0.0:_88_,[::]:_88_
#                                                       #   Specify the TCP address and/or ports for the `/usr/sbin/krb5kdc` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kdc_tcp_port. If neither kdc_tcp_listen nor kdc_tcp_port are
#                                                       #   specified, kadmind_listen defaults to *:* and binds to port 88 (the compiled-in default). If krb5kdc fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #
#   kdc_tcp_port = _88_ (88)                            #   The original name for `kdc_tcp_listen` before release 1.15 . Used as an alias now when `kdc_tcp_listen` is not set.
#                                                       #
#                                                       #   The 88 value is set as defined in /etc/services as kerberos-adm.
#                                                       #
#   kpasswd_listen = _*_ _*:kpasswd_port_ interface 0.0.0.0:_464_ [::]:_464_ | _*_,_*:kpasswd_port_,interface,0.0.0.0:_464_,[::]:_464_
#                                                       #   Specify the kpassword address and/or ports for the `/usr/sbin/kadmind` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kpasswd_port. If neither kpasswd_listen nor kpasswd_port are
#                                                       #   specified, kpasswd_listen defaults to *:* and binds to port 464 (the compiled-in default). If kadmind fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #
#   kpasswd_port = _464_ (464)                          #   The original name for `kpasswd_listen` before release 1.15 . Used as an alias now when `kpasswd_listen` is not set.
#                                                       #
#                                                       #   The 464 value is set as defined in /etc/services as kpasswd. 
#                                                       #
#   master_key_name = K/M                               #   Define the name of the principal associated with the KDC database master key. The default is "K/M"@REALM, REALM being your Kerberos
#                                                       #   realm. Used internally to encrypt principal keys in the database.
#                                                       #
#                                                       #
#   master_key_type = aes256-cts-hmac-sha1-96 aes256-cts aes256-sha1 aes128-cts-hmac-sha1-96 aes128-cts aes128-sha1 _aes256-cts-hmac-sha384-192_ aes256-sha2 aes128-cts-hmac-sha256-128 aes128-sha2 *arcfour-hmac* *rc4-hmac* *arc‐four-hmac-md5* *arcfour-hmac-exp* *rc4-hmac-exp* *arc‐four-hmac-md5-exp* camellia256-cts-cmac camellia256-cts camellia128-cts-cmac camellia128-cts aes *rc4* camellia( aes256-cts-hmac-sha1-96  )
#                                                       #   Set the encryption type for the KDC database master key. This list is long, but this is all the accepted values. Unfortunatelly,
#                                                       #   the accepted values include aliases. Prefered is surrounded by _, deprecated by *. Encryption types marked as *weak* and
#                                                       #   *deprecated* are  available  for compatibility but really not recommended for use.
#                                                       #   See FURTHER DISCUSSION: MASTER KEY ALGORITHMS for more.
                                                        #
#   imax_life = 1d (24h)                                #   Time duration string. Specify the maximum time period during which a for which a ticket may be valid in this realm.
#                                                       #   Defaults to 24 hours
#                                                       #
#   max_renewable_life = 7d (0h)                        #   Time duration string. Specify the maximum total time period during which a valid ticket may be renewed in this realm.
#                                                       #   7d means that each renewal grants 1 more day, up to 7 days total, since max_life is set to 1d.
#                                                       #   Defaults to 0 hours.
#                                                       #
#   no_host_referal = example.com example.org | example.com,example.org
#                                                       #   Prevent the KDC from automatically guessing the correct realm for service principals like host/foo.example.com. Whitespace
#                                                       #   or comma-separated list.
#                                                       #   Normally, if a client asks for host/foo without specifying the correct realm, the KDC could look it up. With no_host_referral,
#                                                       #   for the listed domains, the KDC will not guess or generate referrals; the request must match exactly. Having "no referal hosts"
#                                                       #   improves security by avoiding accidental or malicious realm guessing. Important for environments with multiple realms/domains.
#                                                       #   There are advanced DNS spoofing and typosquatting issues, here, do not take this lightly.
#                                                       # 
#                                                       #   Kerberos 5 needs an explicit trust path or explicit realm mapping. It will not randomly pick a realm in a multi-realm
#                                                       #   environment.
#                                                       #
#   reject_bad_transit = _true_ | false ( true )        #   Enforce checking the transit path in cross-realm tickets. If set to true, the KDC will verify all realms listed in the transit
#                                                       #   section of the ticket are trusted. A transit path is the list of realms a cross-realm ticket passed through. 
#                                                       #   Inter-realm trust relationships are set via `capaths` in krb5.conf and via manual cross-realm keys (krbtgt/REALM2@REALM1
#                                                       #   and vice-versa). If this value is set to false, such tickets will be issued anyways. It will be left up to the application
#                                                       #   server to validate the realm transit path.
#                                                       #   Important in multi-realm environments. Prevents ticket forgery through unauthorized intermediate realms.
#                                                       #
#   restrict_anonymous_to_tgt = true | false ( false )  #   Boolean. If set to `true`, anonymous users can get tickets for the Ticket Granting Ticket (TGT) service of the
#                                                       #   realm, but they cannot request tickets for other services. By setting `restrict_anonymous_to_tgt = true`, you
#                                                       #   ensure anonymous authentication is only used for security mechanisms and not for actual service access. This means that
#                                                       #   anonymous principals can only get a Ticket Granting Ticket (TGT), preventing them from requesting service (services at hosts)
#                                                       #   tickets. This increases security by restricting anonymous actions only to authentication, not service access. If disabled,
#                                                       #   anonymous principals can request service tickets, too. A TGT alone proves minimal existence/authentication but without service
#                                                       #   access, it is useful only for very restricted setups like service discovery or policy queries allowed to anonymous users, such
#                                                       #   as querying the KDC for password policies (e.g., minimum length, expiration rules) without authenticating to a real service. This
#                                                       #   allows client pre-checks before prompting for credentials. True TGT-based service discovery is rare and will have to be custom
#                                                       #   built.
#                                                       #   This variable also appears in [kdcdefaults] .
#                                                       #
#   spake_preauth_indicator = spake-used                #   Set some string metadata as label data in the ticket, to indidcate when the Simple Password Authenticated Key Exchange ( SPAKE )
#                                                       #   pre-authentication protocol is used. SPAKE is an alternative to encrypted timestamp for password-based preauth and it is more
#                                                       #   resistant to offline brute-force attacks. Ticket gets a field like: auth-indicators = [ spake-used ] and then services have to
#                                                       #   check this field to decide about appropriate access control. This is a flag which exists only for pure policy flexibility.
#                                                       #
#                                                       #   There are no fucking defaults to this string, nor is there a default list of values. In their infinite wisdom, the MIT Kerberos
#                                                       #   distribution chose to let the end-admin to pull a value out of their hinds and hope for the best.
#                                                       #   Sample values I have come up with are 'mfa', 'secure-login' and 'spake-used'
#                                                       #
#                                                       #   An auth indicator is metadata: a flag inside the ticket that describes how the user authenticated.
#                                                       #
#   supported_enctypes  = aes256-cts-hmac-sha1-96:_special_ aes128-cts-hmac-sha1-96:_special_ | aes256-cts-hmac-sha1-96:_special_,aes128-cts-hmac-sha1-96:_special_ ( aes256-cts-hmac-sha1-96:normal aes128-cts-hmac-sha1-96:normal ) 
#                                                       #   Define the default key/salt combinations of principals for this realm. Any principals created through kadmin will have keys of these types.
#                                                       #   For information on what are the possible values and what is an enctype and why the fuck does that :normal or :special appear there, go
#                                                       #   look under FURTHER DISCUSSION: KEYSALT LISTS AND KEYSALTS IN KERBEROS .
#                                                       
#
# } # end of EXAMPLE.COM realm
#
# [dbdefaults]         # Default database settings
#
#   This section is a design fuckup: Originally, it was intended to provide default values for database-specific parameters
#   in single-realm environments. It remained as a leftover from when MIT Kerberos grew multi-realm support without proper
#   cleanup, leading to redundancy and potential confusion. This shift reflects a lack of comprehensive redesign to
#   accommodate multi-realm configurations effectively.
#   In modern configurations, it is advisable to define realm-specific settings directly under the [dbmodules] section for
#   clarity and precision. The [dbdefaults] section remains for backward compatibility but is generally considered obsolete
#   in well-structured multi-realm setups.
#   The following variables were supposed to be set here, but evolved into per-real variables. They can still be used but
#   they get overriden when by their realm instanciation.
#
#       ldap_kerberos_container_dn
#       ldap_kdc_dn
#       ldap_kdc_sasl_authcid
#       ldap_kdc_sasl_authzid
#       ldap_kdc_sasl_mech
#       ldap_kdc_sasl_realm
#       ldap_kadmind_dn
#       ldap_kadmind_sasl_authcid
#       ldap_kadmind_sasl_authzid
#       ldap_kadmind_sasl_mech
#       ldap_kadmind_sasl_realm
#       ldap_service_password_file
#       ldap_conns_per_server
#
#   The only variable that is unique to this section is 
#       db_module_dir = /absolute/path/to/database/backend/modules/ 
#                                                       #   Location of the libraries for database modules. Must be an absolute path.
#
# [dbmodules]          # Per-database settings
#   The [dbmodules] section defines how each Kerberos database backend is
#   configured. Each entry sets options for a named database module, usually
#   as <TYPE_OF_BACKEND>_<REALM>. Each module controls how the KDC stores,
#   reads and writes principal data.
#
#   A database module can be attached to multiple realms and be shared.
#   Realm-to-module mapping is controlled by the database_module under
#   each respective realm.
#
# DB2_EXAMPLE.COM = {
#
#   database_name   = _/var/kerberos/krb5kdc/REALM.principal_ ( /var/kerberos/krb5kdc/principal )
#                                                       #   Specify the filename for the DB2 database backend.
#                                                       #
#   db_library      = db2 | klmdb | kldap ( db2 )       #   Specify the loadable database library for this module. Defaults to db2.
#                                                       #
#   disable_last_success = true | false (false)         #   Kerberos stores a "last successful authentication" field for any successful login/TGT issuance
#                                                       #   in the backend for auditing, tracking activity and detecting stale or compromised accounts.
#                                                       #   Setting this flag to 'false' disables this ability. The documenation actually says
#                                                       #   "may improve performance." Not sure if it is worth setting this to false on actual hardware
#                                                       #   Supported for the DB2 and LDAP backends. In LDAP, the schema must support this field.
#                                                       #   Defaults to false.
#                                                       #
#   disable_lockout = true | false (false)              #   Kerberos stores a "last failed authentication' field for any failed login/TGT issuance. i
#                                                       #   Setting this flag to 'false' disables account lockout policy enforcement after login failures.
#                                                       #   The documentation actually says "may improve performance but also disables account lockout."
#                                                       #   If true, users are never locked out regardless of bad password attempts.
#                                                       #   Supported for the DB2 and LDAP backends. In LDAP, the schema must support this field.
#                                                       #   Defaults to false.
#                                                       #
#   ldap_conns_per_server = 5 (5)                       #   Define how many LDAP connections the KDC or kadmind will open to each LDAP server.
#                                                       #   Higher values help parallelism under load but consume moderately more resources.
#                                                       #   Defaults to 5 if unset.
#                                                       #
#   ldap_kdc_dn = "cn=kdc-service,ou=services,dc=example,dc=com"
#                                                       #   Specify the bind Distinguished Name (DN) used by `/usr/sbin/krb4kdc` to authenticate against the LDAP server.
#                                                       #   It needs enough rights to read/write principal data (user accounts).
#                                                       #
#   ldap_kadmind_dn = "cn=kadmin-service,ou=services,dc=example,dc=com"
#                                                       #   Specify the LDAP bind Distinguished Name (DN) used specifically by `/usr/sbin/kadmind` for database
#                                                       #   administration tasks. The  kadmind  DN  must have the rights to read and write the Kerberos data in
#                                                       #   the LDAP database.
#                                                       #
#   ldap_kdc_sasl_mech = GSSAPI | EXTERNAL | DIGEST-MD5 #   Specify the SASL authentication mechanism the KDC uses to bind to LDAP. Options are 
#                                                       #       * GSSAPI: Selfexplanatory 
#                                                       #       * EXTERNAL: Use credentials from an external source, such as TLS client certificates to auth to LDAP
#                                                       #       * DIGEST-MD5: SASL mechanism that authenticates by hashing username and password, without sending them in plaintext.
#   ldap_kadmind_sasl_mech = GSSAPI | EXTERNAL | DIGEST-MD5
#                                                       #   Specify the SASL authentication mechanism kadmind uses to bind to LDAP. Options are 
#                                                       #       * GSSAPI: Selfexplanatory 
#                                                       #       * EXTERNAL: The Kerberos library uses credentials from an external source, such as TLS client certificates, to auth to LDAP
#                                                       #       * DIGEST-MD5: The Kerberos library uses the SASL mechanism to authenticate to LDAP 
#                                                       #           by hashing username and password, without sending them in plaintext.
#                                                       #
#   ldap_kdc_sasl_authcid = kdc-ldap-user ( NULL )      #   Set the SASL authentication identity (username) the KDC will use when binding to LDAP. No default, up to you, value is an example.
#                                                       #
#   ldap_kadmind_sasl_authcid = kdc-ldap-user ( NULL )  #   Set the ASL authentication identity (username) kadmind will use when binding to LDAP. No default, up to you, value is an example.
#                                                       #
#   ldap_kdc_sasl_authzid = dn:<Distinguished Name> | u:<username>
#                                                       #   Specify the authorization identity the KDC wants to assume after authenticating. Optional; used if the identity to act as differs
#                                                       #   from the authcid. This is done to separate authentication (prove identity) from authorization (what role it acts as).
#                                                       #   Example: authenticate as bind-user, but authorize as cn=kdc-service,dc=example,dc=com to access LDAP entries with service rights.
#   ldap_kadmind_sasl_authzid = dn:<Distinguished Name> | u:<username>
#                                                       #   Specify the authorization identity kadmind wants to assume after authenticating. Optional; used if the identity to act as differs
#                                                       #   from the authcid. This is done to separate authentication (prove identity) from authorization (what role it acts as).
#                                                       #   Example: authenticate as bind-user, but authorize as cn=kdc-service,dc=example,dc=com to access LDAP entries with service rights.
#                                                       #
#   ldap_kdc_sasl_realm = EXAMPLE.COM ( NULL )          #   Set the SASL realm for authentication. Used when `ldap_kdc_sasl_mech` is set to  DIGEST-MD5.
#                                                       #
#   ldap_kadmind_sasl_realm = EXAMPLE.COM ( NULL )      #   Set the SASL realm for authentication. Used when `ldap_kadmind_sasl_mech` is set to  DIGEST-MD5.
#                                                       #
#   ldap_kerberos_container_dn = cn=krbcontainer,dc=example,dc=com.
#                                                       #   Define the LDA Distinguished Name (DN)  where Kerberos objects (principals, policies) are stored inside the LDAP directory.
#                                                       #   No default, up to you, value is an example.
#                                                       #
#   ldap_servers =  ldaps://ldap1.example.com ldaps://ldap2.example.com
#                                                       #   Whitespace list of LDAP URIs. Kerberos manages to be inconsistent yet again. Use of ldapi: or ldaps: is recommended.
#                                                       #
#   ldap_service_password_file = /etc/kerberos/ldap_service.keyfile
#                                                       #   Specify a file storing LDAP service principal passwords securely. Make sure you chmod 0600 and xatrrib this.
#                                                       #   Objects using these are `ldap_kdc_dn`, `ldap_kadmind_dn`, `ldap_kdc_sasl_authcid, `ldap_kadmind_sasl_authcid`.
#                                                       #   Passwords are being dreated by 'kdb5_ldap_util stashsrvpw'
#                                                       #
#   mapsize = 256 ( 128 )                               #   Only applies if using DB2 or LMDB as a local backend: Set the maximum memory-mapped file size for the DB2 database.
#                                                       #   Documentation is talking about "Two database environments". It means the main Kerberos principal database and policies database
#                                                       #   each stored in a separate LMDB (.mdb) file, if LMDB is the backend.
#                                                       #   Higher values support more principal entries without resizing the database file.
#                                                       #   If you come across the "Environment mapsize limit reached" error, increase the value. 
#                                                       #   See FURTHER DISCUSSION: HOW TO REBUILD THE DB2/LMDB BACKEND for more information.
#                                                       #   Size is MB.
#                                                       #
#   max_readers  = 128 ( 128 )                          #   Set the maximum number of simultaneous readers for the LMDB backend. It controls how many KDC/kadmind processes can access the
#                                                       #   database concurrently without blocking. If the value here is too low, reader processes will block, slowing down authentication
#                                                       #   or any admin tasks.
#                                                       #
#   nosync = true | _false_ ( false )                   #   LMDB-specific setting: Disable flushing database writes to disk immediately. It speeds up writes but risks data loss if the
#                                                       #   system crashes before changes reach disk.
#                                                       #   These guys live in the dark ages: the speed up is negligible with modern hardware.
#                                                       #
#   unlockiter = true | false ( true )                  #   DB2-specific setting: Let the KDC release the database read lock while iterating over entries, reducing contention. Can prevent
#                                                       #   extended blocking of KDC or kadmin operations when dumps of large databases are in progress. Turning it off only makes sense
#                                                       #   if you have very fragile locking needs, which is very rare.
#                                                       #
# } # end of DB2_EXAMPLE.COM database module
#
# [logging]            # Control how the krb5kdc(8) and kadmind(8) daemons and the kdb5_util(8) perform logging
#
#   In [logging], there are the following settings:
#       admin_server:   Logs for /usr/sbin/kadmind
#       kdc:            Logs for /usr/sbin/krb5kdc
#       default:        Logs for both above, when one missing
#       debug:          Turn debugging on, but only if logging target is other than SYSLOG. SYSLOG always included debugging
#                       output because it has its own priority filtering. Default is false.
#
#   Each of the of the settings can accept a list of values, debug excluded which is binary. Each value is a log target:
#
#       admin_server=   [ FILE=/path/to/log/file | FILE:/path/to/log/file ], [ STDERR, ] [ CONSOLE, ] [SYSLOG[:severity[:facility]], ]
#       kdc         =   [ FILE=/path/to/log/file | FILE:/path/to/log/file ], [ STDERR, ] [ CONSOLE, ] [SYSLOG[:severity[:facility]], ]
#       default     =   [ FILE=/path/to/log/file | FILE:/path/to/log/file ], [ STDERR, ] [ CONSOLE, ] [SYSLOG[:severity[:facility]], ]
#       debug       =   true | false ( false )
#
#   The list can include multiple repeating values.
#
#   Logging targets are the following:
#
#   FILE=/path/to/log/file | FILE:/path/to/log/file     #   Write to given file
#   STDERR                                              #   Write to stderr
#   CONSOLE                                             #   Write to console
#   DEVICE=/path/to/device                              #   Write to any writeable device: /dev/console, /dev/ttyXX, /dev/lpr or /dev/null
#                                                       #       Writing to /dev/console is, of course, stupid cuz there is an explicit target above.
#                                                       #       Writing to /dev/null disregards the logs and effectively disabling logging, cuz someone could not bother
#                                                       #       using a fucking switch variable to turn logging on and off.
#                                                       #       Why is this here? cuz cobwebs, that is why.
#                                                       #
#   SYSLOG[:severity[:facility]]                        #   facilities: KERN, USER, MAIL, DAEMON, AUTH, LPR, NEWS, UUCP, CRON, and LOCAL0-LOCAL7 ( all Unix SVR4 style,
#                                                       #       defaults to AUTH )
#                                                       #
#                                                       #   severity: IT SHOULD HAD BEEN THE USUAL: INFO, WARN, ERROR, DEBUG . BUT THESE FUCKERS IGNORE IT. 
#                                                       #       YES! YOU READ THIS RIGHT: THEY TOTALLY IGNORE SEVERITY, CUZ SYSLOG IN SVR3 HAS NOT BEEN INVENTED YET.
#                                                       #       AND THIS IS SUPPOSED TO BE A PRODUCT OF MIT.
#   
#   ############################
#   NOTE: If no logging specification is given, the default is to use SYSLOG. To disable logging entirely,
#       set     default = DEVICE=/dev/null ,
#   ############################
#   
#
# [otp [<name>] ]                # One-time password settings
#
#   [otp] configures Kerberos OTP preauthentication behavior. Used when integrating hardware or software OTP with kinit.
#   In MIT Kerberos, OTP support assumes using RADIUS as the backend for validating OTPs. The "RADIUS server" is any
#   external authentication server (e.g., FreeRADIUS) that checks the OTP. Kerberos just forwards the request—it does
#   not validate the OTP itself. The replying server needs to speak RADIUS.
#
#   ######################################################################
#   BE VERY CAREFUL: [OTP] AND <NAME>
#   ######################################################################
#
#   Buried in the krb5.conf(5) and kdc.conf(5) man pages and very VERY VERY VERY VERY poorly explained, the [otp] section can
#   be configured optionally with a <name> tag, effectivelly allowing for multiple [otp] sections:
#       [otp googleauth]
#       [otp msauth]
#       [otp trixbox]
#       ...
#    and so on. Values are unique for each section but can be instanciated repeatadly, once every section.
#
#    DOCUMENTATION IS UTTER GARBAGE. I HAD TO DIG INTO src/plugins/preauth/otp/otp_state.c, otp_preauth.c TO FUCKING FIND OUT
#    PAY ATTENTION. THIS <name> WILL BE USED FURTHER BELOW.
#
#   server = freeradius.example.com:1812 | IPv4:1812 | [[IPv6:]]1812 | socket ( socket: /va/kerberos/krb5kdc/<name>.socket= .
#                                                       #   Single value of RADIUS server to connect to do pass on the OTP
#                                                       #   token. Accepts IPv4, IPv6 (as long as you remember to enclose it
#                                                       #   in brackets appropriately) or a socket. 
#                                                       #   Defaults to /var/kerberos/krb5kdc/<name>.socket , where <name> is
#                                                       #   what we discussed above.
#                                                       ######################################################################
#                                                       HUGE CATCH: IF YOU USE SOCKETS AND YOU DO NOT NAME THE SECTION, <name>
#                                                       STAYS EMPTY AND THE SOCKET FAILS. YOU SHOULD GET AN IMMEDIATE PREAUTH
#                                                       FAILURE ERROR, WHEN TRYING TO USE KINIT.
#                                                       ######################################################################
#                                                       #
#   secret = /absolute/path/to/secret | relative/path/to/secret | ACTUALLFUCKINGSECRETINPLAIN
#                                                       #   Specify the shared secret used between the KDC and the RADIUS server.
#                                                       #   Path can be absolute or relative to `/var/kerberos/krb5kdc`
#                                                       #   Must match the client configuration of the RADIUS server.
#                                                       #   Secret does not need to be encrupted or hashed or salted, can be plain.
#                                                       #   The secret should appear in the first line of the file by itself.
#                                                       #   MAKE SURE YOU TRIM ALL WHITESPACE
#                                                       #   REQUIRED ONLY WHEN `server = freeradius.example.com:1812 | IPv4:1812 | [[IPv6:]]1812` . 
#                                                       #   Not used otherwise, but keep in mind: Kerberos will *still* try to use
#                                                       #   a secret, even when this is not set and *will* send an empty secret.
#                                                       #   Be careful if you do not set this variable or set it to an empty file.
#                                                       #
#   timeout = 5 ( 5 )                                   #   Set the number of seconds to wait for a response from the RADIUS server.
#                                                       #   Applies only when using a network server, not a local socket. If the
#                                                       #   timeout is exceeded, the OTP request fails. This time is the total
#                                                       #   across all retries when validating the OTP token. So, it should be less
#                                                       #   than the time which an OTP value remains valid for.
#                                                       #   Defaults to 5 seconds.
#                                                       #
#   retries = 3 ( 3 )                                   #   Set the maximum number of authentication attempts the KDC will make
#                                                       #   to the RADIUS server. Each retry happens only if no valid response is
#                                                       #   received before timeout expires. Retries share the same total `timeout`
#                                                       #   window.
#                                                       #   Defaults to 3 retries.
#                                                       #
#   strip_realm = false | true ( true )                 #   Control whether the Kerberos realm is removed from the username before
#                                                       #   sending it to the RADIUS server. If `true`, only the principal name
#                                                       #   (before @) is sent. If false, full principal (user@REALM) is sent.
#                                                       #   Why do we care: Some RADIUS servers or OTP backends do not expect or
#                                                       #   handle realms but just the usernames. Sending user@REALM may cause
#                                                       #   rejection or mismatch. Stripping the realm ensures compatiblity.
#                                                       #   Defaults to `true`.
#                                                       #
#   indicator = mfa, otp, your mom | mfa otp your_mom ( NULL )
#                                                       #   String label inserted into the authentication indicators of the ticket if
#                                                       #   if OTP preauth succeeds. Used for policy enforcement (e.g. requiring OTP
#                                                       #   for certain services). The receiving side is responsible to check this
#                                                       #   field. Value is a free-form string, e.g. otp or mfa.
#                                                       #   Defaults to NULL and if not set, the flag does not get set, respectively.
#                                                       #
###################################################
#   ATTENTION!!! ATTENTION!!! ATTENTION!!!
#   EXTRA DOGSHIT DOCUMENTATION:
#
#   [otp] has an implicit default section. It is named DEFAULT. It is defined only when
#   the per-principal configuration does not  specify a token type. You can override ( and should )
#   this token type to fit your needs. The definition of this DEFAULT is:
#
#       [otp]
#           DEFAULT = {
#               strip_realm = false
#           }
#
###################################################
#   ATTENTION!!! ATTENTION!!! ATTENTION!!!
#   EXTRA DOGSHIT DOCUMENTATION:
#   HISTORICAL DESIGN FLAW AND DOCUMENTATION GARBAGE:
#   THIS SHOULD HAD EITHER BEEN ITS OWN SECTION
#   OR BE MOVED UP TO [realms]
#
##########################################################################
# FURTHER DISCUSSION: PKINIT
##########################################################################
#   PKINIT
#       PKINIT settings should should have had its own section. Instead,
#       they are placed under [realms] (realm-specific) or [kdcdefaults]
#       as globals, polluting those sections.
#       Why are they at the end of the man page instead of having their
#       own subsection in those respective sections?
#           Because the man page structure is a disorganized mess.
#           PKINIT was bolted on later, so its options were dumped 
#           at the end instead of integrated logically.
#           Classic case of "append, do not refactor".
#
#   WHAT IS PKINIT:
#       Public Key Cryptography for Initial Authentication ( PKINIT ) replaces
#       the password of the user in Kerberos with X.509 certificate-based auth.
#       User proves identity via private key tied to a trusted cert; KDC
#       validates it via trusted anchors[1]. 
#
#       To put it more plainly: PKINIT most times is a password alternative, not
#       MFA by itself: It replaces password-based authentication with certificate
#       -based auth. It can be part of MFA, if combined with something else (e.g.
#       smartcard + PIN). Since Kerberos supports stacking multiple preauthentication
#       mechanisms, using a mechanism that incorporates a cert (PKINIT) +  password
#       (encrypted challenge) + OTP (RADIUS) can lead to a full MFA solution.
#       A complete solution uses at least two forms of factor authentication from these
#       different categories:
#           * Something you have (cert, token, smartcard)
#           * Something you know (password, PIN)
#           * Something you are (biometrics)
#
#       Used for smartcards, HSMs or cert-based login.
#
#   [1] Trusted anchor: a root CA certificate the KDC uses to validate client cert chains.
#       If a client cert chains up to this anchor, the KDC considers it trusted.
#       It is specified via `pkinit_anchors`. More below.
#
#       
#
#
# THIS SHIT ABOUT NAMING THE OTP SECTION NEEDS VERIFICATION:
#   If <name> (the subsection name) is not defined, the plugin cannot
#   resolve the socket path.
#   OTP preauthentication fails immediately. There is NO fallback.
#
#   Create an [otp] subsection without a name, like just [otp] alone.
#   Leave out server explicitly.
#   Try kinit with OTP preauth—
#   You should get an immediate preauth failure error.
#
#
##
##########################################################################
#
##########################################################################
# EXAMPLE SETUP
##########################################################################
#
#   Example setup includes a short description of the setting ?????????
#
# [kdcdefaults]        # Settings used by the Kerberos V5 library
#
#   kdc_tcp_listen_backlog      = 128                   # The size of the listen queue length for the KDC daemon. The value may be limited by OS settings. Defaults to 5.
#   kdc_max_dgram_reply_size    = 4096                  # Specify the maximum packet size to be sent over UDP. Defaults to 4096 bytes.
#   spake_preauth_kdc_challenge = edwards25519
#
##########################################################################
# Daemon configuration variables
##########################################################################
#
#   kdc_listen                       = 0.0.0.0:88                   # Specify the UDP listening addresses and/or ports for the kdb5kdc daemon,
#   kdc_tcp_listen                   = 88                           # Specify the TCP listening addresses and/or ports for the krb5kdc daemon.
#   master_key_type                  = aes256-cts-hmac-sha384-192   # Specify the algorithm to encrypt the kerberos principle database.
#   dict_file                        = /usr/share/dict/words        # Swear and other simple words that cannot be passwords.
#   default_principal_flags          = preauth                      # Flags this KDC allows in its tickets
#   #
#   # NOTE: admin_keytab was removed from MIT Kerberos in version 1.18 (February 2020), to avoid any config mismatch between KDC and kadmind
#   # and force a predictable, secured location. The only way to change it now is to either change the service unit and add 
#   #     -k /path/you/want/to/set/it/to/file.keytab to ExecStart .
#   # admin_keytab                     = /etc/krb5kdc/kadm5.keytab
#
#   supported_enctypes               = aes256-cts-hmac-sha384-192:special aes128-cts-hmac-sha256-128:special
#   #  encrypted_challenge_indicator = pkinit-hw
# 
# [realms]             # Per-realm-specific database configuration and settings
# EXAMPLE.IS = {
#
# }
#########################################################################
# FURTHER DISCUSSION: GENERAL
##########################################################################
#
# SERVICE PRINCIPAL NAME (SPN)
#   An SPN (Service Principal Name) is the unique Kerberos name for a service, like host/foo@REALM.
#
# CONSTRAINED DELEGATION
#       Constrained Delegation is a Microsoft Kerberos extension that allows a service to act on behalf of a user, but
#   only to specific backend services explicitly allowed by AD policy. Unlike traditional delegation, which forwards
#   the full TGT of the user, constrained delegation does not give the service unrestricted access — it can only request
#   service tickets for defined services using the identity of the user. The credentials of the user never leave the KDC.
#       This solves the problem of limiting trust: instead of trusting a front-end (e.g., a web server) to act as the
#   user everywhere, the service can be configured via AD to allow access only backend services like a database or file
#   share. AD configures the web service account to limit where it can delegate. The web service itself is not aware of
#   the restriction, it is the KDC which enforces it, by conditionally issuing service tickets. When the web service
#   requests a ticket on behalf of a user, the KDC checks: 
#       1. Is ok-to-auth-as-delegate set on the service principal?
#       2. Is the target Service Principal Name (SPN) allowed in AD delegation policy for that service account?
#   If not, the KDC refuses the ticket and no delegation happens. The KDC sets ok-as-delegate in the returned ticket only
#   if both checks pass.
#       Introduced in Windows Server 2003, it is widely used in AD environments in AD environments via Group Policy or
#   Active Directory Users and Computers — a GUI tool in Windows for managing AD objects. On Linux, it is rarely used
#   outside of AD integration.
#       It is also not-so-accuratelly named. It should had been called "scoped impersonation"
#
# * SuSP4U
#
# * SUSP4UU2 (name them correctly)
#
# * ok-as-delegate
#
# * ok-to-auth-as-delegate
#
##########################################################################
# FURTHER DISCUSSION: KERBEROS STORAGE BACKENDS
##########################################################################
#
# Kerberos needs a storage backend. That can be: 
#     * A db2 database
#     * LDAP
#     * kldap — LDAP backend for the Heimdal implementation
# The database_module variable is a pointer to a label within the [dbmodules] section.  It acts as an indirect reference rather
#     than directly specifying the database library. Why? Cuz someone in the 1980s thought "that belongs in its own section", rather
#     than directly inserting the reference there
#     So, you will see a label here; it may be named
#         * LDAPsomething
#         * DB2something
#         * REALMsomething
#      or * ANYTHING_REALLY
#     It is not a real definition. It is a pointer in the [dbmodules] section. You will look this label up in [dbmodules] and see what
#     actuall backend it may be using. Naming this label appropriately is only up to the kindness and thoughfulness of the person writing
#     this configuration section. Do not trust what you see, cuz it may end up that LDAP_BACKEND, for example, may be using db or something
#     else. 
#     The default location for all databases is /var/kerberos/krb5kdc/
#     If database_module is not specified, Kerberos/the KDC daemon defaults to creating a DB2 database backend for use, named after the
#     realm, i.e. /var/kerberos/krb5kdc/<realm>.db
#     If the appropriate labeled  section is missing, Kerberos will apply the default database settings.
# 
#     Note: If the [dbmodules] section named in database_module is missing, the KDC daemon will use the default values for all database
#         variable settings
#     Note: This was more convoluted that it needed to be
#
# database_module = LDAP_BACKEND
# database_module = DB2_BACKEND
# database_module = EXAMPLE.COM
# database_module = SUPERCALIFRAGILISTICEXPIALIDOCIOUS
# database_module = marvin_the_paranoid_android
#
##########################################################################
# FURTHER DISCUSSION: MASTER KEY ALGORITHMS
##########################################################################
#
# Here is a table with all the master key values accepted for `master_key_type`. The collumns are Primary Name for the algorithm or the family of algorithms,
# any aliases the variable accepts, a short explation of what the algorithm is and the current accepted strength of the algorithm againstr decrypting it.
# The Primary Name, in the fashion of MIT Kerberos may or may not be explicit value of the algorithm used, but you can also pass the family alias and Kerberos
# will pick up the strongest available. The alias which can be used as short hand. Family aliases do not have a shorthand. 
#
#    +------------------------------+---------------------------------------------+----------------------------------------------+-----------------------+
#    | Primary Name                 | Aliases                                     | Explanation                                  | Strength/Status       |
#    +------------------------------+---------------------------------------------+----------------------------------------------+-----------------------+
#    | aes256-cts-hmac-sha1-96      | aes256-cts, aes256-sha1                     | AES-256 CTS mode with 96-bit SHA-1 HMAC      | strong                |
#    | aes128-cts-hmac-sha1-96      | aes128-cts, aes128-sha1                     | AES-128 CTS mode with 96-bit SHA-1 HMAC      | medium                |
#    | aes256-cts-hmac-sha384-192   | aes256-sha2                                 | AES-256 CTS mode with 192-bit SHA-384 HMAC   | _strongest_           |
#    | aes128-cts-hmac-sha256-128   | aes128-sha2                                 | AES-128 CTS mode with 128-bit SHA-256 HMAC   | strong                |
#    | arcfour-hmac                 | rc4-hmac, arc-four-hmac-md5                 | RC4 with HMAC/MD5 (deprecated)               | weak, deprecated      |
#    | arcfour-hmac-exp             | rc4-hmac-exp, arc-four-hmac-md5-exp         | Exportable RC4 with HMAC/MD5 (weak)          | very weak, deprecated |
#    | camellia256-cts-cmac         | camellia256-cts                             | Camellia-256 CTS mode with CMAC              | strong                |
#    | camellia128-cts-cmac         | camellia128-cts                             | Camellia-128 CTS mode with CMAC              | medium                |
#    |                              |                                             |                                              |                       |
#    # ALIASES FOR FAMILIES         #                                             #                                              #                       #
#    | aes                          | family alias for: aes256-cts-hmac-sha1-96,  | AES family alias, kerberos will pick         | mixed, depends on     |
#    |                              | aes128-cts-hmac-sha1-96, aes256-cts-hmac-   |  the strongest available on the machine      |  algorithm            |
#    |                              | sha384-192, aes128-cts-hmac-sha256-128)     |                                              |                       |
#    | rc4                          | arcfour-hmac                                | RC4 family alias                             | weak, deprecated      |
#    | camellia                     | camellia256-cts-cmac, camellia128-cts-cmac  | Camellia family alias, kerberos will pick    | mixed, depends on     |
#    |                              |                                             |  the strongest available on the machine      |  algorithm            |
#    +------------------------------+---------------------------------------------+----------------------------------------------+-----------------------+
#
# The MIT Kerberos has more f̶u̶c̶k̶e̶r̶y̶syntactic sugar than needed, for this variable. There is a final value called "DEFAULT". If you see that or any string
# that includes it, remove it and put the explicit value on it. Do not bother with it, as it is prefered to know in advance if the machine does not have
# the algorithm library set, so it can be fixed.
#
##########################################################################
#  FURTHER DISCUSSION: KEYSALT LISTS AND KEYSALTS IN KERBEROS
##########################################################################
#    Kerberos creates its user keys from passwords using a "keysalt list". A keysalt list consists of the name of an encryption algorithm type and
#    a salt type, in the format of `encryption:salt` pairs. Each pair specifies how to create a key from a password by using the algorithm and using
#    specified salting method. Multiple pairs are separated by spaces or commas. Available encryption types are all the algorithms discussed
#    in FURTHER DISCUSSION: MASTER KEY ALGORITHMS below.
# 
#    Here is an example value:
#        supported_enctypes = aes256-cts:normal,aes128-cts:normal 
#    This tells Kerberos to generate keys for the AES256 and AES128 encryption types using normal salting, meaning use the principal and the realm name
#    as salt.
#    Salts are used to make sure users who pick the same password get different keys. Salt types include:
#        * normal: default, uses the principal and realm as salt
#        * norealm: uses only the principal as salt, no realm),
#        * onlyrealm: uses the realm only
#        * special: generates a random salt
#
##########################################################################
# FURTHER DISCUSSION: OPTIMISTIC CHALLENGE
##########################################################################
#
# "Optimistic challenge" is when the KDC will try to send preemptively send a pre-authentication challenge to a client, without waiting for the client to 
# as for credentials. This is done via the SPAKE protocolr, assuming the client supports it. By using the optimistic challenge, we are trying to avoid extra
# round-trips.
#
##########################################################################
# FURTHER DISCUSSION: PROPER PRE-AUTH METHODS
##########################################################################
#
#   Proper pre-auth methods include:
#       * Encrypted timestamp: Most common, password-based.
#       * PKINIT: Certificate/smartcard-based.
#       * OTP: One-time password.
#       * FAST armor tickets: Tunnel pre-auth.
#
#   The reason for all these are to prove the identity of the user/client before the KDC issues a ticket.
#
##########################################################################
# FURTHER DISCUSSION: HOW TO REBUILD THE DB2/LMDB BACKEND 
##########################################################################
#
#   There are no command-line tools to do this task.
#
#   For DB2:
#       * Rebuild manually with a bigger mapsize:
#           * Dump the db via `/usr/sbin/kdb5_ldap_util dump /path/to/file`
#           * Move/delete the existing file
#           * Load the dump via `/usr/sbin/kdb5_ldap_util /path/to/file`
#   For LMDB:
#       * Adjust mapsize in config.
#       * Restart KDC — LMDB automatically resizes the mapping (no dump/load needed).
#
##########################################################################
# FURTHER DISCUSSION: 
#   WHAT TOOLS IS A KERBEROS COMPRISED OF
##########################################################################
#
# A KDC comprises of these tools:
#   * /usr/bin/kadmin:              the Kerberos command-line tool for administering the KDC database (create, modify, delete principals, etc.).
#   * /usr/sbin/kdb5_ldap_util:     command-line tool to manage the LDAP Kerberos database backend: create, modify, destroy realms and entries in LDAP. LDAP equivalent of kdb5_util. 
#
##########################################################################
# SETUP FOR MARSEL.IS
##########################################################################
[kdcdefaults]          # Settings used by the Kerberos V5 library

[realms]               # Per-realm-specific database configuration and settings

MARSEL.IS = {
    master_key_type         = aes256-cts-hmac-sha384-192
    database_name           = /var/kerberos/krb5kdc/marsel.is.principal
    admin_keytab            = /var/kerberos/krb5kdc/marsel.is-kadm5.keytab
    acl_file                = /var/kerberos/krb5kdc/marsel.is-kadm5.acl
    dict_file               = /var/kerberos/krb5kdc/marsel.is-kadm5.dict
    key_stash_file          = /var/kerberos/krb5kdc/.k5.MARSEL.IS
    kadmind_tcp_port        = 749
    max_life                = 12h 0m 0s
    max_renewable_life      = 7d 0h 0m 0s
    default_principal_flags = +preauth      ????????
    # Disabling weak algorithms allows Kerberos to be FIPS compatible: 
    # FIPS is the system-wide enforcement of FIPS 140-2 cryptographic
    # standards (U.S. federal certification). Only strong, validated
    # algorithms (e.g., AES, SHA-2) are allowed. Weak algorithms (RC4,
    # DES) must be disabled. Linux distros like RHEL/Fedora can force
    # FIPS mode at boot. See 
    #   https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/security_hardening/switching-rhel-to-fips-mode_security-hardening
    # for more info.
    supported_enctypes = aes256-cts-hmac-sha384-192:special aes128-cts-hmac-sha256-128:special
}

[dbdefaults]           # Default database settings

[dbmodules]            # Per-database settings

[logging]              # Control how the krb5kdc(8) and kadmind(8) daemons and the kdb5_util(8) perform logging

[otp]                # One-time password settings

