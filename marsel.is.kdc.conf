#########################################################################
# /var/kerberos/krb5kdc/marsel.is.kdc.conf
#   Kerberos Domain Controller configuration file
#   Aspiring to be written in the the PostgreSQL documentation style: clear and consise
#
#   2025-02-12  George Marselis <george@marsel.is>
##########################################################################
#   TABLE OF CONTENTS
#
#   1. STRUCTURE OF THE KDC.CONF FILE
#   2. SECTIONS OF A KDC.CONF FILE
#   3. VARIABLES FOR EACH SECTION AND THEIR VALUES ( about 830 lines )
#       3.1     [kdcdefaults]
#       3.2     [realms]
#           3.2.1 NOTE NOTE NOTE NOTE NOTE 2025-06-11
#       3.3     [dbdefaults]
#       3.4     [dbmodules]
#       3.5     [logging]
#       3.6     [otp]
#           3.6.1 BE VERY CAREFUL: [OTP] AND <NAME>
#   4. FURTHER DISCUSSION
#       4.1  GENERAL
#       4.2  COMMENT PLACEMENT AND INDENTATION
#       4.3  TERMINOLOGY ( especially the kind that appears once and then never seen again )
#       4.4  OPTIMISTIC CHALLENGE
#       4.5  CONSTRAINED DELEGATION
#            4.5.1 Service for User to Self (S4U2Self)
#            4.5.2 Service for User to Proxy (S4U2Proxy)
#       4.6  KERBEROS STORAGE BACKENDS
#       4.7  CONFIGURATION DEPENDENCIES AND IMPLICIT CONSTRAINTS
#       4.8  KEYSALT LISTS AND KEYSALTS IN KERBEROS
#       4.9  MASTER KEY ALGORITHMS
#       4.10 PROPER PRE-AUTH METHODS
#       4.11 PKINIT
#       4.12 WHAT COMMAND LINE TOOLS MAKE UP MIT KERBEROS
#       4.13 UNDOCUMENTED FEATURES OF USING SAID TOOLS
#           4.13.1 ANONYMOUS PROCESSING
#           4.13.2 -N and -O : kadmin USES RPC OVER IP (I don't like Mondays)
#       4.14 EXAMPLES OF MIT KERBEROS TOOL USAGE
#           4.14.1 /usr/bin/kadmin && /usr/sbin/kadmin.local
#
#       4.15 GSSAPI
#       4.16 COMMAND-LINE TOOLS <-> CONFIGURATION INTERFACE MAP
#   5. NEVER-INCLUDED PROCEDURES ( BUT SHOULD HAVE HAD )
#       5.1 HOW TO REBUILD THE DB2/LMDB BACKEND
#       5.2 HOW TO UNFUCK A KEYTAB
#           5.2.1 IN KERBEROS
#           5.2.2 IN SSSD
#   6. EXAMPLE SETUP
#   7. SETUP FOR MARSEL.IS
#
##########################################################################
# 1. STRUCTURE OF THE KDC.CONF FILE
##########################################################################
#
#   The kdc.conf file is set up in the Microsoft Windows .ini format style, same as the krb5.conf(5)
#
##########################################################################
# 2. SECTIONS OF A KDC.CONF FILE
##########################################################################
#
#   A kdc.conf file may contain the following sections:
#
#       [kdcdefaults]  # Settings used by the Kerberos KDC server
#       [realms]       # Per-realm-specific database configuration and settings
#       [dbdefaults]   # Default database settings
#       [dbmodules]    # Per-database settings
#       [logging]      # Control how the krb5kdc(8) and kadmind(8) daemons and the kdb5_util(8) perform logging
#       [otp]          # One-time password token settings
#
##########################################################################
# 3. VARIABLES FOR EACH SECTION AND THEIR VALUES  ( about 830 lines )
##########################################################################
#
#   This is a reference and short explanation with further pointers of all configuration options found in kdc.conf. It is also the bulk
#   of the file. We are attempting to make this readable and understandable even to junior sysadmins, vs the flusterduck that is the official
#   Kerberos 5 MIT documnetion.
#
#   Juniors who choose to plow through this should come out with a slight advantage of understanding why PKI/Certs are such a mess. While
#   any Kerberos implementation at his present moment (2025) is... undervalued and underused. These days, kerberos is more used in Active
#   Directory and most environments use SSSD as a lookup-only altenrative to setting up Kerberos/LDAP, which can be a royal pain. Either
#   way, SSSD or Kerberos/LDAP, this document will come handy on a later date when you try to not punch either developer team through
#   several reinforced Never Hoxha bunker walls while reading their respective documentation. As colleague and friend Joe Thompson said
#   to me "The chief virtue of sssd is that it's not as issue-prone as nscd... . The bar is so low that you descend canal locks to get
#   there from the Dead Sea."
#
#   A sensible setup example is included at the end of the commentary, after the FURTHER DISCUSSION sections.
#
##########################################################################
# 3.1 [kdcdefaults]    # Settings used by the Kerberos KDC server
#
#   Most of the variables introduced here have a per-realm definition. We list some of the shared ones here because it is
#   an easy way to understand the minimum setup required for a single realm setup at a glance, though the description
#   here is very much abridged. If you need the full explanation, go look them up in the [realms] section. We follow
#   the format of kdc.conf(5) in that regard. 
#
#       host_based_services = host,nfs,ssh              # List of services which have to accept a kerberos ticket for the connection to succeed.
#       kdc_listen          = *:88                      # Specify the UDP addresses and/or ports for the `/usr/sbin/krb5kdc` daemon (the  Kerberos Key Distribution Center daemon).
#       # kdc_ports                                     # Older naming for kdc_listen, now serves as alias if kdc_listen is not set
#       kdc_tcp_listen      = *:88                      # Specify the TCP addresses and/or ports for the `/usr/sbin/krb5kdc` daemon (the  Kerberos Key Distribution Center daemon).
#       # kdc_tcp_ports                                 # Older naming for kdc_listen, now serves as alias if kdc_listen is not set
#       no_host_referral    = example.is,example.com    # Disable ticket referrals to this list of hosts
#       restrict_anonymous_to_tgt  = true               # Useful only for very restricted setups like policy queries allowed to anonymous users, such as querying the KDC for
#                                                       # password policies (e.g., minimum length, expiration rules) without authenticating to a real service. 
#                                                       #
#       # See also under FURTHER DISCUSSION: 4.11 PKINIT for cert paths, trust anchors, and plugin behavior.
#       pkinit_anchors = DIR:/path/to/CA/dir            # Path or directory where the Certificate Authority (CA) certificate is located
#       pkinit_dh_min_bits = P-521                      # Minimum strength of Diffie-Hellman algorithm for key exchange
#       pkinit_allow_upn = true                         # Allow accepting client certificates with the Microsoft UserPrincipalName (UPN) Subject Alternative Name (SAN)
#       pkinit_eku_checking = kpClientAuth              # Control how the KDC verifies the Extended Key Usage (EKU) field in client certs.
#       pkinit_identity = DIR:/path/to/certdir          # Specify the location of the certificate of the KDC or the private key of the client used for PKINIT.
#       pkinit_indicator = pkinit                       # Set the authentication indicator flag added to tickets when PKINIT is used.
#       pkinit_pool = DIR:/etc/pki/pem                  # Specify intermediate CAs used to validate client cert chains.
#       pkinit_revoke = DIR:/etc/pki/clr                # Specify how the KDC checks certificate revocation for PKINIT ( file or OCSP ),
#       pkinit_require_crl_checking = true              # Force strict CRL checks during PKINIT.
#       pkinit_require_freshness = true                 # Enforce checking of the PKINIT freshness token to prevent replay.
#
#   The following three variables are an exception. They do not have a per-realm definition, so we 
#   will explain them here:
#
#       kdc_max_dgram_reply_size = _4096_ (4096)        #   Specify the maximum packet size to be sent over UDP. Defaults to 4096 bytes.
#       kdc_tcp_listen_backlog   = 5                    #   Set the size of the listen queue length for the KDC daemon. The value may be limited by OS settings. Defaults value to 5.
#                                                       #
#       spake_preauth_kdc_challenge = edwards25519 P-256 P-384 P-521 ( edwards25519 )
#                                                       #   Simple Password Exponential Key Exchange (SPAKE) s a pre-authentication mechanism. What this setting does is saying
#                                                       #   which algorithm should we use to preemptively send a challenge to the client, before it actually asks us, so, we can
#                                                       #   save cycles. 
#                                                       #   Look below in FURTHER DISCUSSION: 4.4 OPTIMISTIC CHALLENGE for a more detailed explanation, cuz it is a  bit long.
#                                                       #   Whitespace or comma separated list of algorithms. In their wisdom, MIT kerberos tells you to look this up in krb5.conf(5)
#                                                       #   instead of duplicating the discussion in kdc.conf(5)
#                                                       #   The values are in order of weaker to stronger algorithm, left is weaker, rightmost is stronger.
#                                                       #   Defaults to edwards25519 .
#
##########################################################################
# 3.2 [realms]         # Per-realm-specific database configuration and settings
#   The following variables can exist both in [kdcdefaults] and in a realm definition. Duplicating here for completeness. See further below for full commentary.
#       host_based_services
#       kdc_listen
#       kdc_ports
#       kdc_tcp_listen
#       kdc_tcp_ports
#       no_host_referral
#       restrict_anonymous_to_tgt
#       pkinit_anchors
#       pkinit_dh_min_bits
#       pkinit_allow_upn
#       pkinit_eku_checking
#       pkinit_identity
#       pkinit_indicator
#       pkinit_pool
#       pkinit_revoke
#       pkinit_require_crl_checking
#       pkinit_require_freshness
#
#   Each tag in the [realms] section is the name of a Kerberos realm. The value of the tag is a subsection where the
#   relations define KDC parameters for that particular realm. The following tag  shows how to define all parameters
#   for the EXAMPLE.COM realm. Follow it through until you reach the "# } # end of EXAMPLE.COM realm" tag, some 400
#   lines below.
#
# EXAMPLE.COM = {
#   acl_file = /var/kerberos/krb5kdc/example.com-kadm5.acl ( NULL )
#                                                       #   Specify the file that controls which Kerberos principals have what permissions# on the Kerberos database. If you run multiple
#                                                       #   realms, it is a good idea to insert the name of the realm in the file. Defaults to "/var/kerberos/krb5kdc/kadm5.acl" . 
#                                                       #   Setting it to "" disables ACL enforcement. If you need more info on how to administer Kerberos ACLs, look at kadm5.acl for
#                                                       #   more information
#                                                       #
#                                                       #   NOTE: It is technically feasible for multiple domains to share an ACL file.
#                                                       #       In such a case, careful management of permissions is essential to prevent conflicts.
#                                                       #   Defaults to being turned off.
#                                                       #
#   database_module = DB2_EXAMPLE.COM ( NULL )          #   The value of database_module can be anything, but historically it is something like <type>.<realm> in uppercase. 
#                                                       #   Take five minutes and read below at FURTHER DISCUSSION: 4.6 KERBEROS STORAGE BACKENDS for more information on backends before
#                                                       #   choosing one.
#                                                       #   Required, but no default.
#                                                       #
#   database_name = /var/kerberos/krb5kdc/principal     #   The path to the db2 database. It is set here in case it is not set in the label in [dbmodules]
#                                                       #   Someone understood they fucked up with the configuration order and they tried to fix it
#                                                       #   but got overruled and the change made it worse. Can be used as a falback or explicit override.
#                                                       #   Deprecated.
#                                                       #
#   default_principal_expiration = 2025-12-31 ( NULL )  #   Provide a safety mechanism to enforce automatic principal expiration if admins forget to set an expiration date manually.
#                                                       #   It is useful for enforcing security policies, such as periodic credential rotation or deactivating temporary accounts.
#                                                       #   The default_principal_expiration setting in kdc.conf only affects principals created after this variable is set. When set and
#                                                       #   a new principal is created without an explicit expiration date, the KDC assigns the expiration date specified by default_principal
#                                                       #   _expiration. Existing principals are not affected by changes to this setting; their expiration dates remain unchanged unless
#                                                       #   specifically modified using administrative tools like kadmin with the modprinc command. If default_principal_expiration is set
#                                                       #   to a date before the date where the configuration is set, any newly created principal without an explicit expiration date will
#                                                       #   be immediately considered expired and unusable. It will exist in the database but cannot obtain tickets because its expiration
#                                                       #   date has already passed.
#                                                       #
#                                                       #   If a principal's expiration date is past, running kadmin.local: getprinc <principal> will show something like:
#                                                       #       `Expiration date: 2025-03-31`
#                                                       #   If the date is past, any attempt to obtain a ticket with kinit will fail with:
#                                                       #       `kinit: Client's entry in database has expired while getting initial credentials`
#                                                       #   Defaults to no expiration. Principal will not expire unless explicitly set using `/usr/bin/kadmin`.
#                                                       #
#   default_principal_flags = +allow-tickets,+forwardable,+preauth,+proxiable,+renewable,+service,+tgt-based,-dup-skey,-hwauth,-no-auth-data-required,-ok-to-auth-as-delegate,-postdateable,-pwchange,-pwservice ( +postdateable,+forwardable,+tgt-based,+renewable,+proxiable,+dup-skey,+allow-tickets, +service  )
#                                                       #   Comma-separated list of flags, with '+' and '-' before each flag to signify enable and disable. Specify
#                                                       #   the default attributes of principals created in this realm. 
#                                                       #   Defaults to +postdateable, +forwardable, +tgt-based, +renewable, +proxiable, +dup-skey, +allow-tickets and +service.
#                                                       #
#                                                       # If set:
#                                                       #   allow-tickets
#                                                       #       Disabling this flag means new principals in this realm will be created (manually or scripted) without the ability to issue
#                                                       #       tickets. It is a way to enforce manual activation of new principals, as the KDC will reject ticket requests, even if the
#                                                       #       credentials are correct. Kerberos handles authentication, not authorization. If allow-tickets is false, the KDC authenticates
#                                                       #       you (valid password), but will not issue a TGT, so you cannot access services.
#                                                       #
#                                                       #   dup-skey
#                                                       #       Allow a service to create a new ticket with the same session key as the original. Used for protocols needing matching keys
#                                                       #       on both client and service sides (e.g., encrypted tunnels). Example: In Kerberos-authenticated IPsec, a gateway may request
#                                                       #       a ticket with dup-skey so both ends share the same session key, ensuring symmetric encryption. The KDC issues both tickets
#                                                       #       with the same session key when dup-skey is used. Both tunnel endpoints get tickets from the KDC. Not commonly used outside
#                                                       #       such low-level encrypted channel setups.
#                                                       #
#                                                       #   forwardable
#                                                       #       Allow obtaining forwardable tickets. A forwardable ticket allows the TGT to be sent to another host, which can then use it
#                                                       #       to request service tickets on behalf of the use. Example: 1. You ssh user@hostA with GSSAPIAuthentication 2. HostA receives
#                                                       #       your TGT. 3. From HostA: ssh hostB — your TGT is forwarded and used to auth to hostB, without the use of any public key in 
#                                                       #       HostA forwarded to HostB or any keys on HostB. No ssh agents are involed either, only Kerberos TGT forwarding via GSSAPI.
#                                                       #
#                                                       #   hwauth
#                                                       #       Enabled, the principal is required to preauthenticate using a hardware device (e.g., smartcard, biometric) before receiving
#                                                       #       any tickets. Example: Insert smartcard into a provided card slot, then type your password for KDC to mark the ticket it give
#                                                       #       you as +hwauth. Removing the card does not affect any TGT already issued; it stays valid until expiry. It also up the client
#                                                       #       host to handle its behavior on removal of the hardware token - KDC has no mechanism to respond to that.
#                                                       #
#                                                       #   no-auth-data-required
#                                                       #       Enabling this flag prevents PAC or AD-SIGNEDPATH data from being added to service tickets for the principal. Used mainly by
#                                                       #       Windows/Kerberos for access control decisions. Typical PAC adds ~1–4 KB to the ticket, depending on user/group info. Without
#                                                       #       PAC, tickets can be less than 500 bytes. Used in anon services, old clients, or minimalistic setups. Modern Windows expects
#                                                       #       PAC in tickets for proper authz.
#                                                       #
#                                                       #   ok-as-delegate
#                                                       #       This one is a pretty long explanation. You should look it up at the end of this conf file under
#                                                       #           FURTHER DISCUSSION: 4.4 OPTIMISTIC CHALLENGE" and FURTHER DISCUSSION: 4.5 CONSTRAINED DELEGATION
#                                                       #       The basic thing is that it was a Microsoft Server 2003 extension to Kerberos, created by Microsoft and backported to MIT
#                                                       #       Kerberos around version 1.11, released around October 2012.
#                                                       #
#                                                       #       The besic idea behind ok-as-delegate and ok-to-auth-as-delegate were created as kerberos extensions by microsoft,
#                                                       #       to proxy auth from web apps to backend systems or at least web-adjacent system. Kerberos itself is not friendly to corporate
#                                                       #       firewalls, so it is not easy for a web app to directly use it cuz it might be blocked. So, we auth via the app, the app gets
#                                                       #       a ticket from kerberos and then uses the ticket for everything else. But you still have to allow applications to "impersonate"
#                                                       #       a user to log in as them. Similarly, applications need to be told in the datagram if they are allowed to delegate authentication
#                                                       #       or not.
#                                                       #           "Do enough engineering work so that the Kerberos protocol becomes the default authentication protocol that is used behind
#                                                       3            corporate firewalls, independent of the protocol that is used at the Web server authentication tier to authenticate the
#                                                       #            Internet user."
#                                                       #           https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc759501(v=ws.10)
#                                                       #       The delegation here is nothing special; it is essentially the forward flag set, saying "use my name when you trying to log in"
#                                                       #       Should had been named as: delegation-permitted
#                                                       #
#                                                       #   ok-to-auth-as-delegate
#                                                       #       This one is a pretty long explanation. You should look it up at the end of this conf file under
#                                                       #           FURTHER DISCUSSION: 4.4 OPTIMISTIC CHALLENGE" and FURTHER DISCUSSION: 4.5 CONSTRAINED DELEGATION
#                                                       #       the basic thing is that it was a Microsoft Server 2003 extension to Kerberos, created by Microsoft and backported to MIT
#                                                       #       Kerberos around version 1.14, released around March 2014.
#                                                       #       
#                                                       #       The basic idea behind ok-to-auth-as-delegate is to explicitly (but conditionally) mark which services are trusted to receive
#                                                       #       user credentials for onward delegation. Without it, a service cannot impersonate the user, even if the client forwards credentials.
#                                                       #       The flag was introduced by Microsoft as part of their Kerberos extensions to support constrained delegation in their Kerberos
#                                                       #       proxying service over the web (S4U2Proxy). See CONSTRAINED DELEGATION at the end of the file.
#                                                       #       
#                                                       #       This was necessary in the ecosystem of Microsoft where services like web apps (IIS, SharePoint) need to access backend systems
#                                                       #       (SQL, SMB) on behalf of a user, but without blindly trusting every front-end. So Microsoft split the delegation trust into two
#                                                       #       parts: one in the principal (ok-to-auth-as-delegate) and one in the ticket (ok-as-delegate), to enforce tighter policy controls.
#                                                       #       In essence, ok-to-auth-as-delegate means "this service is trusted to use the identity of a user to access other services" but
#                                                       #       only if the KDC decides it is allowed. It is not real impersonation control — it is just permission to let the delegation
#                                                       #       state machinery activate.
#                                                       #       Should had been named as: allow-receive-delegation
#                                                       #       
#                                                       #   postdateable
#                                                       #       Allow the ticket to be  be issued with a start time in the future. This allows the ticket to be issued befroe it's valid-from
#                                                       #       time. Useful in belayed-start jobs, like batch processing or scheduled logins.
#                                                       #   
#                                                       #   preauth
#                                                       #       Require the user enter their password. before the KDC issues a Ticket Granting Ticket (TGT). This prevents offline password
#                                                       #       guessing by forcing the user to verify their identity. Otherwise, the KDC can send encrypted replies without verifying first
#                                                       #       the identity of the client requesting the Ticket Granting Ticket, which is a major security hole.
#                                                       #       If required and not provided, KDC replies with PREAUTH_REQUIRED
#                                                       #
#                                                       #   proxiable
#                                                       #       Allow obtaining tickets which can be used by a service to request a new ticket on behalf of a user for a different service.
#                                                       #       It enables delegation across different services, not just the initial one. For example, a batch job scheduler 
#                                                       #       E.g. Slurm gets a TGT for a job submitted by a user, allowing it to request service tickets on behalf of the user to
#                                                       #       access windows shares on other data storage devices.
#                                                       #
#                                                       #   pwchange
#                                                       #       Enable the ability to flag a ticket only valid for changing the password of the stated principal. Issued by KDC when the
#                                                       #       password is expired and only allows access to the kadmin/changepw service. No access to other services until password is
#                                                       #       updated. This means new principals are created with the "must change password at first login" flag set. Used to enforce
#                                                       #       initial password rotation by default.
#                                                       #
#                                                       #   pwservice
#                                                       #       Allow the principal to access the password change service. Used when issuing a TGT with pwchange — it restricts access to
#                                                       #       only this service, but rarely changed unless you have set up some custom password service routing.
#                                                       #
#                                                       #   renewable
#                                                       #       Enable the ability for principals to obtain renewable tickets, therefore a ticket can be renewed (i.e., its lifetime extended)
#                                                       #       without the user re-authenticating. Used in long-running jobs or when you want to avoid frequent password prompts.
#                                                       #       A renewable ticket has two timers: endtime: short initial validity (e.g., 10h) and renew-till: max renewal window (e.g., 7d)
#                                                       #       You must renew before endtime, within the renew-till window, by using manually (e.g., via kinit -R) or by tools like k5start,
#                                                       #       krb5-auth-dialog, or system daemons. Kerberos does not auto-renew tickets itself.
#                                                       #
#                                                       #   service
#                                                       #       Enable the ability to mark newly created principals as service principals, i.e. not users. This disables password expiry and
#                                                       #       preauth by default. Common for host/, HTTP/, etc. Useful when using kadmin to define principals for daemons or hosts and the
#                                                       #       they are expected to manage their own credentials without user input.
#                                                       #
#                                                       #   tgt-based
#                                                       #       Enable the ability for service principals to obtain a Ticket Granding Ticket (TGT) using the keytab of the service, enabling
#                                                       #       it to act like a user in certain workflows, like Kafka Connect or Flume pulling data from a kerberized Hadoop Distributed File
#                                                       #       System. `+tgt-based` is for active clients, not passive services, like Apache, IMAP, SMTP or any service which accepts and
#                                                       #       validates Kerberos tickets but does not request tickets or obtain TGTs themselves.
#                                                       #
#  dict = /usr/share/dict/words ( NULL )                #   Location of the dictionary file containing strings that are not allowed as passwords. One string per line, no whitespace. If not
#                                                       #   specified, no password checking is done. Used to blacklist specific words, typically offensive or undesirable terms or very 
#                                                       #   generic weak passwords. All passwords containing any of the words are rejected.
#                                                       #       `dnf install words` to install the dictionary
#                                                       #   No checking done by default. Recommended to turn on.
#                                                       #
#  disable_pac = true | false (false)                   #   PAC (Privilege Attribute Certificate) is a Microsoft Kerberos extension carrying authorization data: User SID, group memberships,
#                                                       #   and logon info such as logged-on time, logged-on domain name, user account name, user display name, profile path, home directory
#                                                       #   user account control flags (such as password expired), and other user session creation, auditing and policy enforcement flags used
#                                                       #   by AD-integrated services/environments. Services can query LDAP/AD directly for full user info but PAC stuffs common fields into
#                                                       #   the ticket for fast, offline evaluation.
#                                                       #   So, turn this on by setting it to `false`, if you got any daemons that use kerberos and windows or your machine is integrated into
#                                                       #   Active Directory. Yes, it is an idiotic naming and setting.
#                                                       #   Defaults to false.
#                                                       #
#  encrypted_challenge_indicator = pkinit-hw | smartcard | mfa | ...  ( NULL )
#                                                       #   Piss-poor named variable. It is just an sysadmin-defined string label inserted into the ticket to indicate the encrypted challenge
#                                                       #   method used: hardware key, smartcard or mfa, though there are no default string values for this variable. If you do not have any
#                                                       #   hardware key, the preauth path is not used, so the label inserted into the packet will be NULL. The reason this exists is to allow
#                                                       #   the receiving end to decide if the authentication proceeded as policy dictates: Was a smartcard used to sign into the VPN? Yes? go
#                                                       #   ahead. No? log that and deny access. Similarly for sudo or any kind of privilledge elevation. It is policy metadata passed from the
#                                                       #   KDC.
#                                                       #       Better name would be: auth_hw_used
#                                                       #   Defaults to not being set.
#                                                       #
#   host_based_services = host ftp nfs ... | host,ftp,nfs ... ( NULL )
#                                                       #   List of service prefixes for which the KDC will automatically add hostnames to form Service Principal Names (SPNs). Whitespace or
#                                                       #   comma separated list. If a service is listed here, the KDC can issue referral tickets for the remote service; The remote service
#                                                       #   must accept the referral ticket for authentication to succeed.
#                                                       #   This allows the KDC to recognize the principle host/foo.example.com@REALM as valid for the host-level logins (e.g., SSH, login, su,
#                                                       #   ftp, nfs or any other service). So, as an example:
#                                                       #       If host_based_services = host, then when a client asks for host/foo@REALM, the KDC will:
#                                                       #           * Recognize host as a known service
#                                                       #           * Accept service@hostname because service matches
#                                                       #           * Resolve it to host/foo@REALM automatically, even if not explicitly listed in the DB
#                                                       #           * Issue a TGT so you can ssh/rlogin/whatever interactive login to the respective service
#                                                       #       Essentially the KDC will accept the match, because of the service, even if even if the principal was not explicitly created
#                                                       #       for foo. This allows for flexible matching based on hostname.
#                                                       #   Defaults to not being set.
#                                                       #
#   iprop_enable = _true_ | false (false)               #   Enable the incremental propagation of kerberos data to secondary KDCs. Used in HA setups to replicate backend DB updates from the
#                                                       #   primary to the secondary KDCs via `/usr/sbin/kpropd` . if set to false, propagation uses full dumps via kprop, not incremental
#                                                       #   updates. Secondary KDCs must periodically pull entire database copies. Usually, the database is small: even for large realms, say
#                                                       #   10k+ principals, rarely exceeds 50-100MB. Still, incremental (iprop) is preferred for latency and frequent updates. With 
#                                                       #   `iprop_enable = true`, each principal update triggers an incremental change log entry. Secondaries pull these deltas via kpropd
#                                                       #   regularly (e.g., every few seconds). Faster, lower overhead than full DB dumps. The log propagation is encrypted with Kerberos.
#                                                       #       Log propagation happens using two tools: `/usr/sbin/kadmind` kadmind listens for connections to serve updates; 
#                                                       #       `/usr/sbin/kpropd` on secondary KDCs connects to `/usr/sbin/kadmind` on the primary to pull logs.
#                                                       #   Defaults to false.
#                                                       #
##########################################################################
#
#   3.2.1 NOTE NOTE NOTE NOTE NOTE 2025-06-11
#
#   I thought I was done with this shit configuration file. Apparently, no.
#
#   Notice one thing: have you seen a variable that specifies the iprop_acl_file? No?
#   That is because the acl file is ***hardcoded in the source***
#
#   $acconfig/kpropd.acl . In Fedora 41, it is /var/kerberos/krb5kdc/kpropd.acl
#
#   THIS IS FUCKING INSANITY. FOR A PRODUCT FROM A UNIVERSITY THAT HAS FUNDAMENTALLY PLAYED A ROLE
#   IN COMPUTER SCIENCE SEE SUCH EGREGIOUS GARBAGE IN SOFTWARE ENGINEERING IS DISENHEARTING TO SAY
#   THE LEAST.
#
#   TAKE STRUCTURE AND INTERPRETATION OF COMPUTER PROGRAMS AND BIN IT
#
##########################################################################
#
#   iprop_ulogsize = 1000 (1000)                        #   Set the max number of update records in the iprop update log. Controls how many changes can be stored for incremental propagation
#                                                       #   before requiring a full resync. While with iprop full resyncs are rare under normal operation, if a secondary misses too many
#                                                       #   updates (exceeds iprop_ulogsize), a full resync is triggered.
#                                                       #   More entried means better resilience against delays, but it also means that iprop uses more memory and disk resources.
#                                                       #   Up to release 1.11, the default value was 2500.
#                                                       #
#   iprop_master_ulogsize = 1000 (1000)                 #   The original name for `iprop_ulogsize` before release 1.19. Used as an alias now when `iprop_ulogsize` is not set.
#                                                       #
#   iprop_replica_poll = 2m (2m)                        #   Delta time string. Specify how often the replica KDC polls for new updates from the primary. The default value is 2m (two minutes).
#                                                       #
#   iprop_slave_poll = 2m (2m)                          #   The original name for `iprop_replica_poll` prior to release 1.17. Used as an alias now when `iprop_slave_poll` is not set.
#                                                       #
#   iprop_listen = _*_ _*:iprop_port_ interface 0.0.0.0:_754_ [::]:_754_ | _*_,_*:iprop_port_,interface,0.0.0.0:_754_,[::]:_754_ ( NULL )
#                                                       #   Specify the addresses and/or ports for the `/usr/sbin/kpropd` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in iprop_port. If neither iprop_listen nor iprop_port are
#                                                       #   specified, iprop_listen defaults to *:* and binds to port 754 (the compiled-in default). If kpropd fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #   Defaults to being turned off.
#                                                       #
#   iprop_port = _754_ (754)                            #   The original name for `iprop_listen` before release 1.15 . Used as an alias now when `iprop_listen` is not set.
#                                                       #
#                                                       #   The 754 value is set as defined in /etc/services as krb5_prop, so the MIT Kerberos distribution is once more full of inconsistencies.
#                                                       #
#   iprop_resync_timeout = 5m (5m)                      #   Delta time string specifying the amount of time to wait for a full propagation to complete. Used only by secondary KDCs. If
#                                                       #   `iprop_resync_timeout` expires, the secondary KDC gives up trying to complete the full resync and logs an error; replication
#                                                       #   halts until retried.
#                                                       #
#   iprop_logfile = /var/kerberos/krb5kdc/iprop_log | _`database_name`.ulog_ (`database_name`.ulog) 
#                                                       #   Specify where the update log file for the realm database is to be stored. Defaults to `database_name`.ulog . If `database_name`
#                                                       #   is not set, the KDC hardcodes its own default (e.g., /var/kerberos/krb5kdc/iprop_log) and ignores any [dbmodules] settings, even
#                                                       #   if your database is LDAP or customized.
#                                                       #   
#   kadmind_listen = _*_ _*:749 interface 0.0.0.0:_749_ [::]:_749_ | _*_,_*:749_,interface,0.0.0.0:_749_,[::]:_749_ ( NULL )
#                                                       #   Specify the address and/or ports for the `/usr/sbin/kadmind` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kadmind_port. If neither kadmind_listen nor kadmind_port are
#                                                       #   specified, kadmind_listen defaults to *:* and binds to port 749 (the compiled-in default). If kadmind fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #   Defaults to being turned off, if you are not a KDC.
#                                                       #
#                                                       #   NOTE: IF YOU ENABLE `/usr/sbin/krb5kdc` and you do NOT set this port, you will see the following error when using
#                                                       #       `/usr/bin/kadmin`
#                                                       #
#   kadmin_port = _749_ (749)                           #   The original name for `kadmind_listen` before release 1.15 . Used as an alias now when `kadmind_listen` is not set.
#                                                       #
#                                                       #   The 749 value is set as defined in /etc/services as kerberos-adm, so the MIT Kerberos distribution is once more full of inconsistencies.
#                                                       #
#   key_stash_file = _/var/kerberos/krb5kdc/.k5.$REALM_ ( /var/kerberos/krb5kdc/.k5.$REALM )
#                                                       #   Set the location of the KDC database master key, used to encrypt keys stored in the Kerberos DB. $REALM, here, is the name of the realm
#                                                       #   in uppercase.
#                                                       #   Defaults to /var/kerberos/krb5kdc/.k5.$REALM .
#                                                       #
#   kdc_listen = _*_ _*:kdc_ports_ interface 0.0.0.0:_88_ [::]:_88_ | _*_,_*:kdc_ports_,interface,0.0.0.0:_88_,[::]:_88_
#                                                       #   Specify the UDP address and/or ports for the `/usr/sbin/krb5kdc` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kdc_ports. If neither kdc_listen nor kdc_ports are
#                                                       #   specified, kadmind_listen defaults to *:* and binds to port 88 (the compiled-in default). If krb5kdc fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #
#                                                       #   NOTE: IF YOU ENABLE `/usr/sbin/krb5kdc` and you do NOT set this port, you will see the following error when using
#                                                       #       `/usr/bin/kadmin`
#                                                       #
#                                                       #
#   kdc_ports = _88_,*750* (88)                         #   The original name for `kdc_listen` before release 1.15 . Used as an alias now when `kdc_listen` is not set.
#                                                       #   Port 750 was the original default port for the Kerberos Key Distribution Center (KDC) in MIT Kerberos 4.
#                                                       #   In modern Kerberos 5 implementations, port 88 is the standard. Some configurations still include 750
#                                                       #   for legacy compatibility, but it is rarely needed today.
#                                                       #
#   kdc_tcp_listen = _*_ _*:kdc_tcp_port_ interface 0.0.0.0:_88_ [::]:_88_ | _*_,_*:kdc_tcp_ports_,interface,0.0.0.0:_88_,[::]:_88_ ( NULL )
#                                                       #   Specify the TCP address and/or ports for the `/usr/sbin/krb5kdc` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kdc_tcp_port. If neither kdc_tcp_listen nor kdc_tcp_port are
#                                                       #   specified, kadmind_listen defaults to *:* and binds to port 88 (the compiled-in default). If krb5kdc fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #   Defaults to being turned off, if you are not a KDC.
#                                                       #
#   kdc_tcp_port = _88_ (88)                            #   The original name for `kdc_tcp_listen` before release 1.15 . Used as an alias now when `kdc_tcp_listen` is not set.
#                                                       #
#                                                       #   The 88 value is set as defined in /etc/services as kerberos-adm.
#                                                       #
#   kpasswd_listen = _*_ _*:kpasswd_port_ interface 0.0.0.0:_464_ [::]:_464_ | _*_,_*:kpasswd_port_,interface,0.0.0.0:_464_,[::]:_464_ ( NULL )
#                                                       #   Specify the kpassword address and/or ports for the `/usr/sbin/kadmind` daemon. Whitespace or comma-separated list.
#                                                       #   If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. The
#                                                       #   default is to bind to the wildcard address at the port specified in kpasswd_port. If neither kpasswd_listen nor kpasswd_port are
#                                                       #   specified, kpasswd_listen defaults to *:* and binds to port 464 (the compiled-in default). If kadmind fails to bind to any of the
#                                                       #   specified addresses, it will fail to start.
#                                                       #   Defaults to being turned off, if you are not a KDC.
#                                                       #
#   kpasswd_port = _464_ (464)                          #   The original name for `kpasswd_listen` before release 1.15 . Used as an alias now when `kpasswd_listen` is not set.
#                                                       #
#                                                       #   The 464 value is set as defined in /etc/services as kpasswd. 
#                                                       #
#   master_key_name = K/M                               #   Define the name of the principal associated with the KDC database master key. The default is "K/M"@REALM, REALM being your Kerberos
#                                                       #   realm. Used internally to encrypt principal keys in the database.
#                                                       #
#                                                       #
#   master_key_type = aes256-cts-hmac-sha1-96 aes256-cts aes256-sha1 aes128-cts-hmac-sha1-96 aes128-cts aes128-sha1 _aes256-cts-hmac-sha384-192_ aes256-sha2 aes128-cts-hmac-sha256-128 aes128-sha2 *arcfour-hmac* *rc4-hmac* *arc‐four-hmac-md5* *arcfour-hmac-exp* *rc4-hmac-exp* *arc‐four-hmac-md5-exp* camellia256-cts-cmac camellia256-cts camellia128-cts-cmac camellia128-cts aes *rc4* camellia( aes256-cts-hmac-sha1-96  )
#                                                       #   Set the encryption type for the KDC database master key. This list is long, but this is all the accepted values. Unfortunately,
#                                                       #   the accepted values include aliases. Preferred is surrounded by _, deprecated by *. Encryption types marked as *weak* and
#                                                       #   *deprecated* are  available  for compatibility but really not recommended for use.
#                                                       #   See FURTHER DISCUSSION: 4.9 MASTER KEY ALGORITHMS for more.
#                                                       #   Defaults to `aes256-cts-hmac-sha1-96`.
#                                                       #
#   imax_life = 1d (24h)                                #   Time duration string. Specify the maximum time period during which a for which a ticket may be valid in this realm.
#                                                       #   Defaults to 24 hours
#                                                       #
#   max_renewable_life = 7d (0h)                        #   Time duration string. Specify the maximum total time period during which a valid ticket may be renewed in this realm.
#                                                       #   7d means that each renewal grants 1 more day, up to 7 days total, since max_life is set to 1d.
#                                                       #   Defaults to 0 hours.
#                                                       #
#   no_host_referral = example.com example.org | example.com,example.org ( NULL )
#                                                       #   Prevent the KDC from automatically guessing the correct realm for service principals like host/foo.example.com. Whitespace
#                                                       #   or comma-separated list.
#                                                       #   Normally, if a client asks for host/foo without specifying the correct realm, the KDC could look it up. With no_host_referral,
#                                                       #   for the listed domains, the KDC will not guess or generate referrals; the request must match exactly. Having "no referral hosts"
#                                                       #   improves security by avoiding accidental or malicious realm guessing. Important for environments with multiple realms/domains.
#                                                       #   There are advanced DNS spoofing and typosquatting issues, here, do not take this lightly.
#                                                       # 
#                                                       #   Kerberos 5 needs an explicit trust path or explicit realm mapping. It will not randomly pick a realm in a multi-realm
#                                                       #   environment.
#                                                       #   Defaults to being turned off.
#                                                       #
#   pkinit_anchors = FILE:/path/to/CA/file ... DIR:/path/to/CA/dir ... ( NULL )
#                                                       #   Path or directory where the Certificate Authority (CA) certificate is located
#                                                       #   The KDC uses these to sign client certificates. If you want to use pkinit with Kerberos, you need to have this set.
#                                                       #   You can specify each FILE: and/or DIR: multiple times.
#                                                       #   See also FURTHER DISCUSSION: 4.11 PKINIT for cert paths, trust anchors, and plugin behavior.
#                                                       #   List is *whitespace separated*, another inconsistency in the Kerberos conf.
#                                                       #   Defaults to off, unless you are using PKINIT.
#                                                       #
#   pkinit_dh_min_bits  = 1024 | 2048 | P-256 | 4096 | P-384 | P-521 ( 2048 )
#                                                       #   Minimum strength of the Diffie-Hellman group the KDC is willing to accept for key exchange. 
#                                                       #   Values are in order of increasing strength.
#                                                       #
#   pkinit_allow_upn = true | false ( false )           #   Allow accepting client certificates with the Microsoft UserPrincipalName (UPN) Subject Alternative Name (SAN). If set, the KDC
#                                                       #   will accept the binding of the UPN in the certificate to the Kerberos principal name.
#                                                       #   Setting this to true has the following benefits:
#                                                       #       * Simplifies cert management: UPN in cert matches Kerberos principal.
#                                                       #       * Enables enterprise identity federation (e.g., AD certs).
#                                                       #   It also has the following disadvantages:
#                                                       #       * Explicitly trusts UPNs from certs: if CA is compromised or the UPN is wrong, an attacker can impersonate users.
#                                                       #       * There is also the issue of increased reliance on precise CA trust and policy enforcement.
#                                                       #   This setting is more useful in an AD integrated environment, where UPNs are primarily used or in enterprise PKIs
#                                                       #   where the AD structure is mimicked. Such are: X.509 certs with UPNs in the SubjectAltName, a Kerberos realm matching
#                                                       #   email/AD-style naming (e.g. user@EXAMPLE.COM) or in centralized identity management, such as FreeIPA. These emulate
#                                                       #   the certificate and principal mapping behavior of Active directory.
#                                                       #   In MIT Kerberos standalone realms, pkinit_allow_upn is rarely useful.
#                                                       #   The default value is false.
#                                                       #
#   pkinit_eku_checking = kpClientAuth | scLogin | none ( kpClientAuth )
#                                                       #   Control how the KDC verifies the Extended Key Usage (EKU) field in client certs.
#                                                       #   Extended Key Usage (EKU) is an X.509 certificate extension that defines explicitly what the cert is allowed to be used for.
#                                                       #   Example: the cert can only be used for client authentication, server authentication or code Signing but not all three.
#                                                       #   This setting has three values: 
#                                                       #   If the required EKU is missing, usage (e.g., PKINIT) should be rejected.
#                                                       #       * kpClientAuth:     client certificates must have the `id-pkinit-KPClientAuth` EKU as defined in RFC 4556. `id-pkinit-KPClientAuth`
#                                                       #                           is an EKU OID defined in RFC 4556 for Kerberos PKINIT client authentication. It has the
#                                                       #                           OID value of 1.3.6.1.5.2.3.4 . `id-pkinit-KPClientAuth` tells the KDC that this cert is valid for Kerberos
#                                                       #                           client authentication only.
#                                                       #       * scLogin:          Client certificates with the Microsoft Smart Card Login EKU `id-ms-kp-sc-logon` set, will be accepted.
#                                                       #                           This EKU has an OID value of 1.3.6.1.4.1.311.20.2.2. A cert can have both `id-pkinit-KPClientAuth` and
#                                                       #                           `id-ms-kp-sc-logon` set simultaneously. In fact, many enterprise smartcard certs do exactly that to support
#                                                       #                           both AD and PKINIT.
#                                                       #       * none:             Do not check if certs have an acceptable EKU. This exists because the leopards-ate-my-face committee of X.509
#                                                       #                           allows extensions ad infinitum and there is always the vendor that grabs the chance to make their own, making
#                                                       #                           the checking not valid. A pox on their house. Heavily not recommended to turn off.
#                                                       #   The reason pkinit_eku_checking does not accept `kpClientAuth` and `scLogin` simultaneously, is because of RFC 4556: Kerberos
#                                                       #   only checks for the Kerberos-defined EKU (id-pkinit-KPClientAuth). It ignores Microsoft-specific EKUs like id-ms-kp-sc-logon by default.
#                                                       #   Why is there an option for scLogin then? Because MIT Kerberos added scLogin as a non-standard override for interoperability with Microsoft
#                                                       #   environments. It is not RFC-compliant, but useful when certs only have `id-ms-kp-sc-logon` set. It exists purely for MS compatibility,
#                                                       #   not standards adherence. #JustKerberosThings
#                                                       #   Defaults to kpClientAuth.
#                                                       #   See also FURTHER DISCUSSION: 4.11 PKINIT for cert paths, trust anchors, and plugin behavior.
#                                                       #
#   pkinit_identity = FILE:/path/to/public/cert,/path/to/private/key PKCS12:/path/to/p12file DIR:/path/to/certdir ( NULL )
#                                                       #   Specify the location of the certificate of the KDC or the private key of the client used for PKINIT.
#                                                       #   Whitespace separated list of possible multiple FILE: PKCS12: and DIR: values, evaluated in order. Each FILE: value must be in 
#                                                       #   public_key,private_key format separated by a comma.
#                                                       #   This option is required if you use PKINIT but defaults to NULL.
#                                                       #   See also FURTHER DISCUSSION: 4.11 PKINIT for cert paths, trust anchors, and plugin behavior.
#                                                       #
#   pkinit_indicator = pkinit |  mfa_cert | ...  (NULL) #   Set the authentication indicator flag added to tickets when PKINIT is used. Value is a free-form string (e.g. pkinit, mfa_cert).
#                                                       #   The receiving end is responsible for checking the value. Services relying on indicators may deny access.
#                                                       #   Single value, defaults to not set. 
#                                                       #
#   pkinit_pool = DIR:/etc/pki/ca-trust/extracted/pem FILE:/etc/pki/CA/intermediate.crt ( NULL )
#                                                       #   Specify intermediate CAs used to validate client cert chains, but not used as Certificate Authority CA certificates.
#                                                       #   Whitespace separated list of FILE: or DIR: locations.
#                                                       #   Defaults to not set.
#                                                       #
#   pkinit_revoke = FILE:/path/to/crl.pem DIR:/path/to/crl/ OCSP ... ( NULL )
#                                                       #   Specify how the KDC checks certificate revocation for PKINIT. Value is whitespace separated list of multiple FILE: and DIR: .
#                                                       #   You can only specify OCSP once.
#                                                       #   Defaults to not being set.
#                                                       #
#                                                       #   Online Certificate Status Protocol (OCSP) is a method for real-time certificate revocation checking. Kerberos PKINIT supports
#                                                       #   OCSP via OpenSSL if the cert's AIA extension includes an OCSP URI. To use OCSP with Kerberos:
#                                                       #       * Set pkinit_revoke = OCSP
#                                                       #       * Ensure OpenSSL on the system supports OCSP
#                                                       #       * Make sure the cert includes a valid OCSP responder URI in its AIA extension
#                                                       #   Defaults to not set.
#                                                       #
#   pkinit_require_crl_checking = _true_ | false | if_issuer ( true )
#                                                       #   Force strict CRL checks during PKINIT.
#                                                       #       * true:         fail if CRL is missing/unavailable
#                                                       #       * false:        CRL is optional
#                                                       #       * if_issuer:    require CRL only if issuer provides a CRL distribution point
#                                                       #   Defaults to true.
#                                                       #
#   pkinit_require_freshness = _true_ | false ( false ) #   Enforce checking of the PKINIT freshness token to prevent replay. The PKINIT freshness token is a nonce[2] signed with the
#                                                       #   private key of the client during authentication. It proves the client is actively using the key and not a replayed response.
#                                                       #   Defined in RFC 8070.
#                                                       #   [2] A nonce is a random, single-use value generated to ensure freshness and prevent replay attacks.
#                                                       #   Defaults to false.
#                                                       #
#   reject_bad_transit = _true_ | false ( true )        #   Enforce checking the transit path in cross-realm tickets. If set to true, the KDC will verify all realms listed in the transit
#                                                       #   section of the ticket are trusted. A transit path is the list of realms a cross-realm ticket passed through. 
#                                                       #   Inter-realm trust relationships are set via `capaths` in krb5.conf and via manual cross-realm keys (krbtgt/REALM2@REALM1
#                                                       #   and vice-versa). If this value is set to false, such tickets will be issued anyways. It will be left up to the application
#                                                       #   server to validate the realm transit path.
#                                                       #   Important in multi-realm environments. Prevents ticket forgery through unauthorized intermediate realms.
#                                                       #
#   restrict_anonymous_to_tgt = true | false ( false )  #   Boolean. If set to `true`, anonymous users can get tickets for the Ticket Granting Ticket (TGT) service of the
#                                                       #   realm, but they cannot request tickets for other services. By setting `restrict_anonymous_to_tgt = true`, you
#                                                       #   ensure anonymous authentication is only used for security mechanisms and not for actual service access. This means that
#                                                       #   anonymous principals can only get a Ticket Granting Ticket (TGT), preventing them from requesting service (services at hosts)
#                                                       #   tickets. This increases security by restricting anonymous actions only to authentication, not service access. If disabled,
#                                                       #   anonymous principals can request service tickets, too. A TGT alone proves minimal existence/authentication but without service
#                                                       #   access, it is useful only for very restricted setups like service discovery or policy queries allowed to anonymous users, such
#                                                       #   as querying the KDC for password policies (e.g., minimum length, expiration rules) without authenticating to a real service. This
#                                                       #   allows client pre-checks before prompting for credentials. True TGT-based service discovery is rare and will have to be custom
#                                                       #   built.
#                                                       #   This variable also appears in [kdcdefaults] .
#                                                       #
#   spake_preauth_indicator = spake-used ( NULL )       #   Set some string metadata as label data in the ticket, to indidcate when the Simple Password Authenticated Key Exchange ( SPAKE )
#                                                       #   pre-authentication protocol is used. SPAKE is an alternative to encrypted timestamp for password-based preauth and it is more
#                                                       #   resistant to offline brute-force attacks. Ticket gets a field like: auth-indicators = [ spake-used ] and then services have to
#                                                       #   check this field to decide about appropriate access control. This is a flag which exists only for pure policy flexibility.
#                                                       #   Look below in FURTHER DISCUSSION: 4.4 OPTIMISTIC CHALLENCE for more on SPAKE.
#                                                       #   There are no fucking defaults to this string, nor is there a default list of values. In their infinite wisdom, the MIT Kerberos
#                                                       #   distribution chose to let the end-admin to pull a value out of their hinds and hope for the best.
#                                                       #   Sample values I have come up with are 'mfa', 'secure-login' and 'spake-used'
#                                                       #   An auth indicator is metadata: a flag inside the ticket that describes how the user authenticated.
#                                                       #   Defaults to not set.
#                                                       #
#   supported_enctypes  = aes256-cts-hmac-sha1-96:_special_ aes128-cts-hmac-sha1-96:_special_ | aes256-cts-hmac-sha1-96:_special_,aes128-cts-hmac-sha1-96:_special_ ( aes256-cts-hmac-sha1-96:normal aes128-cts-hmac-sha1-96:normal ) 
#                                                       #   Define the default key/salt combinations of principals for this realm. Any principals created through kadmin will have keys of these types.
#                                                       #   For information on what are the possible values and what is an enctype and why the fuck does that :normal or :special appear there, go
#                                                       #   look under FURTHER DISCUSSION: 4.8 KEYSALT LISTS AND KEYSALTS IN KERBEROS .
#                                                       #   Defaults to `aes256-cts-hmac-sha1-96:normal aes128-cts-hmac-sha1-96:normal`.
#                                                       #
# } # end of EXAMPLE.COM realm
#
##########################################################################
# 3.3 [dbdefaults]     # Default database settings
#
#   This section is a design fuckup: Originally, it was intended to provide default values for database-specific parameters
#   in single-realm environments. It remained as a leftover from when MIT Kerberos grew multi-realm support without proper
#   cleanup, leading to redundancy and potential confusion. This shift reflects a lack of comprehensive redesign to
#   accommodate multi-realm configurations effectively.
#   In modern configurations, it is advisable to define realm-specific settings directly under the [dbmodules] section for
#   clarity and precision. The [dbdefaults] section remains for backward compatibility but is generally considered obsolete
#   in well-structured multi-realm setups.
#   The following variables were supposed to be set here, but evolved into per-realm variables. They can still be used here
#   but it is better you set them in their respective realm instantiation.
#
#       ldap_kerberos_container_dn
#       ldap_kdc_dn
#       ldap_kdc_sasl_authcid
#       ldap_kdc_sasl_authzid
#       ldap_kdc_sasl_mech
#       ldap_kdc_sasl_realm
#       ldap_kadmind_dn
#       ldap_kadmind_sasl_authcid
#       ldap_kadmind_sasl_authzid
#       ldap_kadmind_sasl_mech
#       ldap_kadmind_sasl_realm
#       ldap_service_password_file
#       ldap_conns_per_server
#
#   The only variable that is unique to this section is 
#       db_module_dir = /absolute/path/to/database/backend/modules/ 
#                                                       #   Location of the libraries for database modules. Must be an absolute path.
#
##########################################################################
# 3.4 [dbmodules]      # Per-database settings
#   The [dbmodules] section defines how each Kerberos database backend is
#   configured. Each entry sets options for a named database module, usually
#   as <TYPE_OF_BACKEND>_<REALM>. Each module controls how the KDC stores,
#   reads and writes principal data.
#
#   A database module can be attached to multiple realms and be shared.
#   Realm-to-module mapping is controlled by the database_module under
#   each respective realm.
#
# DB2_EXAMPLE.COM = {
#
#   database_name   = _/var/kerberos/krb5kdc/REALM.principal_ ( /var/kerberos/krb5kdc/principal )
#                                                       #   Specify the filename for the DB2 database backend.
#                                                       #
#   db_library      = db2 | klmdb | kldap ( db2 )       #   Specify the loadable database library for this module. Defaults to db2.
#                                                       #
#   disable_last_success = true | false (false)         #   Kerberos stores a "last successful authentication" field for any successful login/TGT issuance
#                                                       #   in the backend for auditing, tracking activity and detecting stale or compromised accounts.
#                                                       #   Setting this flag to 'false' disables this ability. The documentation actually says
#                                                       #   "may improve performance." Not sure if it is worth setting this to false on actual hardware
#                                                       #   Supported for the DB2 and LDAP backends. In LDAP, the schema must support this field.
#                                                       #   Defaults to false.
#                                                       #
#   disable_lockout = true | false (false)              #   Kerberos stores a "last failed authentication' field for any failed login/TGT issuance. i
#                                                       #   Setting this flag to 'false' disables account lockout policy enforcement after login failures.
#                                                       #   The documentation actually says "may improve performance but also disables account lockout."
#                                                       #   If true, users are never locked out regardless of bad password attempts.
#                                                       #   Supported for the DB2 and LDAP backends. In LDAP, the schema must support this field.
#                                                       #   Defaults to false.
#                                                       #
#   ldap_conns_per_server = 5 (5)                       #   Define how many LDAP connections the KDC or kadmind will open to each LDAP server.
#                                                       #   Higher values help parallelism under load but consume moderately more resources.
#                                                       #   Defaults to 5 if unset.
#                                                       #
#   ldap_kdc_dn = cn=kdc-service,ou=services,dc=example,dc=com ( NULL )
#                                                       #   Specify the bind Distinguished Name (DN) used by `/usr/sbin/krb4kdc` to authenticate against the LDAP server.
#                                                       #   It needs enough rights to read/write principal data (user accounts).
#                                                       #   Defaults to not being set, if not using krb4kdc.
#                                                       #
#   ldap_kadmind_dn = cn=kadmin-service,ou=services,dc=example,dc=com ( NULL )
#                                                       #   Specify the LDAP bind Distinguished Name (DN) used specifically by `/usr/sbin/kadmind` for database
#                                                       #   administration tasks. The  kadmind  DN  must have the rights to read and write the Kerberos data in
#                                                       #   the LDAP database.
#                                                       #   Defaults to not being set, if not using kadmin.
#                                                       #
#   ldap_kdc_sasl_mech = GSSAPI | EXTERNAL | DIGEST-MD5 #   Specify the SASL authentication mechanism the KDC uses to bind to LDAP. Options are 
#                                                       #       * GSSAPI: Selfexplanatory 
#                                                       #       * EXTERNAL: Use credentials from an external source, such as TLS client certificates to auth to LDAP
#                                                       #       * DIGEST-MD5: SASL mechanism that authenticates by hashing username and password, without sending them in plaintext.
#                                                       #   Defaults to `GSSAPI`.
#   ldap_kadmind_sasl_mech = GSSAPI | EXTERNAL | DIGEST-MD5
#                                                       #   Specify the SASL authentication mechanism kadmind uses to bind to LDAP. Options are 
#                                                       #       * GSSAPI: Selfexplanatory 
#                                                       #       * EXTERNAL: The Kerberos library uses credentials from an external source, such as TLS client certificates, to auth to LDAP
#                                                       #       * DIGEST-MD5: The Kerberos library uses the SASL mechanism to authenticate to LDAP 
#                                                       #           by hashing username and password, without sending them in plaintext.
#                                                       #   Defaults to `GSSAPI`.
#                                                       #
#   ldap_kdc_sasl_authcid = kdc-ldap-user ( NULL )      #   Set the SASL authentication identity (username) the KDC will use when binding to LDAP. No default, up to you, value is an example.
#                                                       #
#   ldap_kadmind_sasl_authcid = kdc-ldap-user ( NULL )  #   Set the ASL authentication identity (username) kadmind will use when binding to LDAP. No default, up to you, value is an example.
#                                                       #
#   ldap_kdc_sasl_authzid = dn:<Distinguished Name> | u:<username> ( NULL )
#                                                       #   Specify the authorization identity the KDC wants to assume after authenticating. Optional; used if the identity to act as differs
#                                                       #   from the authcid. This is done to separate authentication (prove identity) from authorization (what role it acts as).
#                                                       #   Example: authenticate as bind-user, but authorize as cn=kdc-service,dc=example,dc=com to access LDAP entries with service rights.
#                                                       #   Defaults to not being set.
#                                                       #
#   ldap_kadmind_sasl_authzid = dn:<Distinguished Name> | u:<username> ( NULL )
#                                                       #   Specify the authorization identity kadmind wants to assume after authenticating. Optional; used if the identity to act as differs
#                                                       #   from the authcid. This is done to separate authentication (prove identity) from authorization (what role it acts as).
#                                                       #   Example: authenticate as bind-user, but authorize as cn=kdc-service,dc=example,dc=com to access LDAP entries with service rights.
#                                                       #   Defaults to not being set.
#                                                       #
#   ldap_kdc_sasl_realm = EXAMPLE.COM ( NULL )          #   Set the SASL realm for authentication. Used when `ldap_kdc_sasl_mech` is set to DIGEST-MD5.
#                                                       #   Defaults to not being set.
#                                                       #
#   ldap_kadmind_sasl_realm = EXAMPLE.COM ( NULL )      #   Set the SASL realm for authentication. Used when `ldap_kadmind_sasl_mech` is set to DIGEST-MD5.
#                                                       #   Defaults to not being set.
#                                                       #
#   ldap_kerberos_container_dn = cn=krbcontainer,dc=example,dc=com. ( NULL )
#                                                       #   Define the LDA Distinguished Name (DN)  where Kerberos objects (principals, policies) are stored inside the LDAP directory.
#                                                       #   No default, up to you, value is an example.
#                                                       #
#   ldap_servers =  ldaps://ldap1.example.com ldaps://ldap2.example.com ( NULL )
#                                                       #   Whitespace list of LDAP URIs. Kerberos manages to be inconsistent yet again. Use of ldapi: or ldaps: is recommended.
#                                                       #   Defaults to not being set.
#                                                       #
#   ldap_service_password_file = /etc/kerberos/ldap_service.keyfile ( NULL )
#                                                       #   Specify a file storing LDAP service principal passwords securely. Make sure you chmod 0600 and xatrrib this.
#                                                       #   Objects using these are `ldap_kdc_dn`, `ldap_kadmind_dn`, `ldap_kdc_sasl_authcid, `ldap_kadmind_sasl_authcid`.
#                                                       #   Passwords are being dreated by 'kdb5_ldap_util stashsrvpw'
#                                                       #   Defaults to not being set.
#                                                       #
#   mapsize = 256 ( 128 )                               #   Only applies if using DB2 or LMDB as a local backend: Set the maximum memory-mapped file size for the DB2 database.
#                                                       #   Documentation is talking about "Two database environments". It means the main Kerberos principal database and policies database
#                                                       #   each stored in a separate LMDB (.mdb) file, if LMDB is the backend.
#                                                       #   Higher values support more principal entries without resizing the database file.
#                                                       #   If you come across the "Environment mapsize limit reached" error, increase the value. 
#                                                       #   See FURTHER DISCUSSION: 5.1 HOW TO REBUILD THE DB2/LMDB BACKEND for more information.
#                                                       #   Size is MB.
#                                                       #
#   max_readers  = 128 ( 128 )                          #   Set the maximum number of simultaneous readers for the LMDB backend. It controls how many KDC/kadmind processes can access the
#                                                       #   database concurrently without blocking. If the value here is too low, reader processes will block, slowing down authentication
#                                                       #   or any admin tasks.
#                                                       #
#   nosync = true | _false_ ( false )                   #   LMDB-specific setting: Disable flushing database writes to disk immediately. It speeds up writes but risks data loss if the
#                                                       #   system crashes before changes reach disk.
#                                                       #   These guys live in the dark ages: the speed up is negligible with modern hardware.
#                                                       #
#   unlockiter = true | false ( true )                  #   DB2-specific setting: Let the KDC release the database read lock while iterating over entries, reducing contention. Can prevent
#                                                       #   extended blocking of KDC or kadmin operations when dumps of large databases are in progress. Turning it off only makes sense
#                                                       #   if you have very fragile locking needs, which is very rare.
#                                                       #
# } # end of DB2_EXAMPLE.COM database module
#
##########################################################################
# 3.5 [logging]        # Control how the krb5kdc(8) and kadmind(8) daemons and the kdb5_util(8) perform logging
#
#   In [logging], there are the following settings:
#       admin_server:   Logs for /usr/sbin/kadmind
#       kdc:            Logs for /usr/sbin/krb5kdc
#       default:        Logs for both above, when one missing
#       debug:          Turn debugging on, but only if logging target is other than SYSLOG. SYSLOG always included debugging
#                       output because it has its own priority filtering. Default is false.
#
#   Each of the of the settings can accept a list of values, debug excluded which is binary. Each value is a log target:
#
#       admin_server =   [ FILE=/path/to/log/file | FILE:/path/to/log/file ], [ STDERR, ] [ CONSOLE, ] [SYSLOG[:severity[:facility]], ] ( NULL )
#       kdc          =   [ FILE=/path/to/log/file | FILE:/path/to/log/file ], [ STDERR, ] [ CONSOLE, ] [SYSLOG[:severity[:facility]], ] ( NULL )
#       default      =   [ FILE=/path/to/log/file | FILE:/path/to/log/file ], [ STDERR, ] [ CONSOLE, ] [SYSLOG[:severity[:facility]], ] ( NULL )
#       debug        =   true | false ( false )
#
#   The list can include multiple repeating values.
#
#   Logging targets are the following:
#
#   FILE=/path/to/log/file | FILE:/path/to/log/file ( NULL ) 
#                                                       #   Write to given file
#   STDERR                                              #   Write to stderr
#   CONSOLE                                             #   Write to console
#   DEVICE=/path/to/device ( NULL )                     #   Write to any writeable device: /dev/console, /dev/ttyXX, /dev/lpr or /dev/null
#                                                       #       Writing to /dev/console is, of course, stupid cuz there is an explicit target above.
#                                                       #       Writing to /dev/null disregards the logs and effectively disabling logging, cuz someone could not bother
#                                                       #       using a fucking switch variable to turn logging on and off.
#                                                       #       Why is this here? cuz cobwebs, that is why.
#                                                       #   Defaults to not being set.
#                                                       #
#   SYSLOG[:severity[:facility]] ( IGNORE, AUTH )       #   facility: KERN, USER, MAIL, DAEMON, AUTH, LPR, NEWS, UUCP, CRON, and LOCAL0-LOCAL7. All Unix SVR4 style, cuz
#                                                       #   we are still in 1965. Maybe in the next universe.
#                                                       #   Defaults to AUTH .
#                                                       #
#                                                       #   severity: IT SHOULD HAD BEEN THE USUAL: INFO, WARN, ERROR, DEBUG . BUT THESE FUCKERS IGNORE IT. 
#                                                       #       YES! YOU READ THIS RIGHT: THEY TOTALLY IGNORE SEVERITY, CUZ SYSLOG IN SVR3 HAS NOT BEEN INVENTED YET.
#                                                       #       AND THIS IS SUPPOSED TO BE A PRODUCT OF MIT.
#   
#   ############################
#   NOTE: If no logging specification is given, the default is to use SYSLOG. To disable logging entirely,
#       set     default = DEVICE=/dev/null ,
#   ############################
#   
#
##########################################################################
# 3.6 [otp [<name>] ]  # One-time password token settings
#
#   [otp] configures Kerberos OTP preauthentication behavior. Used when integrating hardware or software OTP with kinit.
#   In MIT Kerberos, OTP support assumes using RADIUS as the backend for validating OTPs. The "RADIUS server" is any
#   external authentication server (e.g., FreeRADIUS) that checks the OTP. Kerberos just forwards the request—it does
#   not validate the OTP itself. The replying server needs to speak RADIUS.
#   See also FURTHER DISCUSSION: 4.10 PROPER PRE-AUTH METHODS ,  for RADIUS and OTP handling details.
#
#   ######################################################################
#   3.6.1 BE VERY CAREFUL: [OTP] AND <NAME>
#   ######################################################################
#
#   Buried in the krb5.conf(5) and kdc.conf(5) man pages and very VERY VERY VERY VERY poorly explained, the [otp] section can
#   be configured optionally with a <name> tag, effectivelly allowing for multiple [otp] sections:
#       [otp googleauth]
#       [otp msauth]
#       [otp trixbox]
#       ...
#    and so on. Values are unique for each section but can be instantiated repeatadly, once every section.
#
#    DOCUMENTATION IS UTTER GARBAGE. I HAD TO DIG INTO src/plugins/preauth/otp/otp_state.c, otp_preauth.c TO FUCKING FIND OUT
#    PAY ATTENTION. THIS <name> WILL BE USED FURTHER BELOW.
#
#   server = freeradius.example.com:1812 | IPv4:1812 | [[IPv6:]]1812 | socket ( socket: /va/kerberos/krb5kdc/<name>.socket= .
#                                                       #   Single value of RADIUS server to connect to do pass on the OTP
#                                                       #   token. Accepts IPv4, IPv6 (as long as you remember to enclose it
#                                                       #   in brackets appropriately) or a socket. 
#                                                       #   Defaults to /var/kerberos/krb5kdc/<name>.socket , where <name> is
#                                                       #   what we discussed above.
#                                                       ######################################################################
#                                                       HUGE CATCH: IF YOU USE SOCKETS AND YOU DO NOT NAME THE SECTION, <name>
#                                                       STAYS EMPTY AND THE SOCKET FAILS. YOU SHOULD GET AN IMMEDIATE PREAUTH
#                                                       FAILURE ERROR, WHEN TRYING TO USE KINIT.
#                                                       ######################################################################
#                                                       #
#   secret = /absolute/path/to/secret | relative/path/to/secret | ACTUALLFUCKINGSECRETINPLAIN ( NULL )
#                                                       #   Specify the shared secret used between the KDC and the RADIUS server.
#                                                       #   Path can be absolute or relative to `/var/kerberos/krb5kdc`
#                                                       #   Must match the client configuration of the RADIUS server.
#                                                       #   Secret does not need to be encrypted or hashed or salted, can be plain.
#                                                       #   The secret should appear in the first line of the file by itself.
#                                                       #   MAKE SURE YOU TRIM ALL WHITESPACE
#                                                       #   REQUIRED ONLY WHEN `server = freeradius.example.com:1812 | IPv4:1812 | [[IPv6:]]1812` . 
#                                                       #   Not used otherwise, but keep in mind: Kerberos will *still* try to use
#                                                       #   a secret, even when this is not set and *will* send an empty secret.
#                                                       #   Be careful if you do not set this variable or set it to an empty file.
#                                                       #   Defaults to not being set.
#                                                       #
#   timeout = 5 ( 5 )                                   #   Set the number of seconds to wait for a response from the RADIUS server.
#                                                       #   Applies only when using a network server, not a local socket. If the
#                                                       #   timeout is exceeded, the OTP request fails. This time is the total
#                                                       #   across all retries when validating the OTP token. So, it should be less
#                                                       #   than the time which an OTP value remains valid for.
#                                                       #   Defaults to 5 seconds.
#                                                       #
#   retries = 3 ( 3 )                                   #   Set the maximum number of authentication attempts the KDC will make
#                                                       #   to the RADIUS server. Each retry happens only if no valid response is
#                                                       #   received before timeout expires. Retries share the same total `timeout`
#                                                       #   window.
#                                                       #   Defaults to 3 retries.
#                                                       #
#   strip_realm = false | true ( true )                 #   Control whether the Kerberos realm is removed from the username before
#                                                       #   sending it to the RADIUS server. If `true`, only the principal name
#                                                       #   (before @) is sent. If false, full principal (user@REALM) is sent.
#                                                       #   Why do we care: Some RADIUS servers or OTP backends do not expect or
#                                                       #   handle realms but just the usernames. Sending user@REALM may cause
#                                                       #   rejection or mismatch. Stripping the realm ensures compatibility.
#                                                       #   Defaults to `true`.
#                                                       #
#   indicator = mfa, otp, your mom | mfa otp your_mom ( NULL )
#                                                       #   String label inserted into the authentication indicators of the ticket if
#                                                       #   if OTP preauth succeeds. Used for policy enforcement (e.g. requiring OTP
#                                                       #   for certain services). The receiving side is responsible to check this
#                                                       #   field. Value is a free-form string, e.g. otp or mfa.
#                                                       #   Defaults to NULL and if not set, the flag does not get set, respectively.
#                                                       #
###################################################
#   ATTENTION!!! ATTENTION!!! ATTENTION!!!
#   EXTRA DOGSHIT DOCUMENTATION:
#
#   [otp] has an implicit default section. It is named DEFAULT. It is defined only when
#   the per-principal configuration does not  specify a token type. You can override ( and should )
#   this token type to fit your needs. The definition of this DEFAULT is:
#
#       [otp]
#           DEFAULT = {
#               strip_realm = false
#           }
#
#########################################################################
# 4.  FURTHER DISCUSSION
#########################################################################
# 4.1 GENERAL
#########################################################################
#
#   1.  If you want to make your own kdc.conf start small and add. The parser for all the configs is incredibly fikle and
#       gives you almost no idea what is wrong and certainly not any where it is wrong.
#   2.  If you using systemd, set logging to STDERR and debug to true. You will go nuts with the logging, but at least
#       there will be more to go nuts with.
#   3.  You can use KRB5_KDC_PROFILE to use a different conf while. This is from the kerberos(7) environmental variables.
#       There are other variables if you want to temporarily test a parameter: 
#           *   KRB5CCNAME
#           *   KRB5_KTNAME
#           *   KRB5_CONFIG             :   krb5.conf location  ( default /etc/krb5.conf )
#           *   KRB5_KDC_PROFILE        :   kdc.conf location   ( default /var/kerberos/krb5kdc/kdc.conf )
#           *   KRB5RCACHENAME
#           *   KRB5RCACHETYPE
#           *   KRB5RCACHEDIR
#           *   KRB5_TRACE              :   trace file, if set kerberos will spew its guts out
#           *   KRB5_CLIENT_KTNAME
#           *   KPROP_PORT              :   kprop(8) port to use( defaults to 754 )
#           *   GSS_MECH_CONFIG
#       Read kerberos(7) for more information
#   4.  `KRB5_KDC_PROFILE=/var/kerberos/krb5kdc/marsel.is.kdc.conf /usr/sbin/krb5kdc -n` starts krb5kdc with 1 process.`-n` 
#       means to start the process in the foreground^[1] . You can override the number of processes in the systemd unit file
#       by adding `-w N` in the ExecStart line or in 'KRB5KDC_ARGS' in /etc/sysconfig/krb5kdc.
#   5.  This is the correct and completed startup sequence:
#
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): Loaded
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): setting up network...
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): setsockopt(8,IPV6_V6ONLY,1) worked
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): setsockopt(10,IPV6_V6ONLY,1) worked
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): set up 4 sockets
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): creating 1 worker processes
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): closing down fd 10
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): closing down fd 9
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): closing down fd 8
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](info): closing down fd 7
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88070](info): commencing operation
#           krb5kdc: starting...
#
#   6.  If you see something like this line
#           May 07 22:29:03 kdc.marsel.is krb5kdc[88069](Error): preauth pkinit failed to initialize: PKINIT initialization failed: No pkinit_identity supplied for realm MARSEL.IS
#       Kerberos is complaining about you not using certificates. You have not set `pkinit_identity` in your default realm. Use 
#           `pkinit_identity = FILE:/etc/pki/tls/certs/kdc.pem,/etc/pki/tls/private/kdc.key`
#       to separate the public and private key. Alternatively, some admins use `pkinit_identity = DIR:/etc/pki/krb5` as it separates the context in which the certs reside.
#       You will also have to set `pkinit_anchors` or you will see this error:
#           May 11 20:55:28 kdc.marsel.is krb5kdc[103465](Error): preauth pkinit failed to initialize: PKINIT initialization failed: No pkinit_anchors supplied for realm MARSEL.IS
#       For a quick solution:
#           $ certtool --generate-privkey --outfile /etc/pki/tls/private/kdc.key
#           $ echo -e 'cn = "KDC"\ntls_www_server\nexpiration_days = 365\nserial = 1\noid = 1.3.6.1.5.2.3.5' > ~/kdc.tmpl
#           $ certtool --generate-self-signed --load-privkey /etc/pki/tls/private/kdc.key --template ~/kdc.tmpl --outfile /etc/pki/tls/certs/kdc.pem
#           $ cat /etc/pki/tls/certs/ca-bundle.crt /etc/pki/tls/certs/kdc.pem > /etc/pki/tls/certs/pkinit-anchors.pem
#       Then, set
#           pkinit_anchors = FILE:/etc/pki/krb5/pkinit-anchors.pem
#       Not an 100% secure solution, but cert security it out of scope for this document. It will get rid of your pkinit errors, but you are acting as your own CA Authority. 
#       Use a proper cert and CA Authority, if deploying live.
#
#   7.  FILE: and DIR: and oh my fucking god... That is a whole other mess:
#       So, you read in the man page that there are list string values for file paths or directory paths that can be denoted as FILE:... and DIR:... and they can be separated
#       either with a comma or whitespace. And you thought "ok, the FILE: and DIR: notation is archaic, you can use stat() these days, so you do not need to denote what is a
#       directory and what is a file... But ok, everything else looks ok...". So you write
#           pkinit_identity = FILE:/etc/pki/tls/certs/kdc.pem,FILE:/etc/pki/tls/private/kdc.key or
#           pkinit_identity = FILE:/etc/pki/tls/certs/kdc.pem FILE:/etc/pki/tls/private/kdc.key or
#           pkinit_identity = FILE:/etc/pki/tls/certs/kdc.pem DIR:/etc/pki/tls/private/
#       You are sure the program will be able to figure out the key, right? Right? Poor soul:
#           preauth pkinit failed to initialize: PKINIT initialization failed: Cannot read certificate file '/etc/pki/tls/certs/kdc.pem FILE:/etc/pki/tls/private/kdc.key'
#       No. The parser keeps blowing chunks. The correct way of writing anything is 
#           pkinit_identity = FILE:/etc/pki/tls/certs/kdc.pem,/etc/pki/tls/private/kdc.key or
#           pkinit_anchors  = DIR:/etc/pki/tls/certs
#       You cannot mix them. In the PKINIT context you will get:
#           krb5kdc[103953](Error): preauth pkinit failed to initialize: PKINIT initialization failed: Cannot open file '/etc/pki/tls/certs/pkinit-anchors.pem DIR:/etc/pki/tls/certs': (null)
#
#       Parsing was invented yesterday, apparently.
#
#   8.  If you see only this:
#           krb5kdc: starting...
#           krb5kdc: starting...
#           krb5kdc: starting...
#           krb5kdc: starting...
#       you fucked up: The kdc.conf file you are pointing to is missing, so kerberos will start with a default profile of its own, filled with default values
#
#   9.  If you see this:
#           Cannot open DB2 database '/var/kerberos/krb5kdc/principal': No such file or directory - while initializing database for realm TEST.REALM
#           krb5kdc: cannot initialize realm TEST.REALM - see log file for details
#       You have not initialized your database. Initialize it via `kdb5_util create -s`
#
#   10. If during startup you see
#           Initializing database '/var/kerberos/krb5kdc/principal' for realm 'TEST.REALM'
#       and you think "i did not set database_name to that!", you have not set `database_name`in the relevant [dbmodules] section
#       Some configurations online show database_name being set in [kdcdefaults], but that is being deprecated.
#
#   11. If you see
#           WARNING! Cannot find dictionary file /var/kerberos/krb5kdc/marsel.is-kadm5.dict, continuing without one
#       The dict_file value points to a non-exising file. You can quick-fix it by 
#           touch /var/kerberos/krb5kdc/marsel.is-kadm5.dict
#       but be aware this creates an empty file and disables word checking.
#
#   12. Make sure you set a value for default_domain in /etc/krb5.conf . If you do not, `/usr/sbin/krb5kdc` will not start.
#
#   13. There is no way to run `/usr/sbin/krb5kdc` without having a value for the principal database both in /etc/krb5.conf: `default_realm` and `database_name`
#
#   13. On the other hand, if you define more than one realm
#           [realms]
#               TEST.REALM = {
#                   database_module = db1
#                   pkinit_identity         = FILE:/etc/pki/tls/certs/kdc.pem,/etc/pki/tls/private/kdc.key
#                   pkinit_anchors          = FILE:/etc/pki/tls/certs/pkinit-anchors.pem
#               } # End of TEST.REALM
#
#               FOO.BAR  = {
#                   database_module = db2
#                   pkinit_identity         = FILE:/etc/pki/tls/certs/kdc.pem,/etc/pki/tls/private/kdc.key
#                   pkinit_anchors          = FILE:/etc/pki/tls/certs/pkinit-anchors.pem
#               }
#
#           [dbmodules]
#               db1 = {
#                   db_library              = db2
#                   master_key_type         = aes256-cts-hmac-sha384-192
#                   ##database_name           = /var/kerberos/krb5kdc/principal.test.realm
#                   admin_keytab            = /var/kerberos/krb5kdc/test.realm-kadm5.keytab
#                   acl_file                = /var/kerberos/krb5kdc/test.realm-kadm5.acl
#                   dict_file               = /var/kerberos/krb5kdc/test.realm-kadm5.dict
#                   key_stash_file          = /var/kerberos/krb5kdc/.k5.TEST.REALM
#               }
#
#               db2 = {
#                   db_library              = db2
#                   master_key_type         = aes256-cts-hmac-sha384-192
#                   database_name           = /var/kerberos/krb5kdc/principal.foo.bar
#                   admin_keytab            = /var/kerberos/krb5kdc/foo.bar.realm-kadm5.keytab
#                   acl_file                = /var/kerberos/krb5kdc/foo.bar-kadm5.acl
#                   dict_file               = /var/kerberos/krb5kdc/foo.bar-kadm5.dict
#                   key_stash_file          = /var/kerberos/krb5kdc/.k5.FOO.BAR
#               }
#
#
#           [otp]
#
#           [logging]
#               kdc                           = STDERR
#               admin_server                  = STDERR
#               default                       = STDERR
#               debug                         = true
#
#       kerberos will not care for the conf of any realm other than the default one. As long as the default realm is initialized
#       and the configuration of the default realm is correct, Kerberos and its parser will not complain of any errors unless a
#       client for the non-default realms connects. Under these circumstances, I am not so sure it is worth it creating multi-realm
#       configurations and instead spawning a new VM and having a single realm configuration. Single-realm-per-VM is simpler and
#       more predictable, no need for extra complications in your life.
#
#   14. Even if all [logging] has been set to STDERR, there are still parts of the stdout that get written to journald 
#
#   15. If you comment out or not set `default_realm` in `/etc/krb5.conf` you will see this message:
#           May 18 18:11:46 kdc.foo.bar krb5kdc[112947](Error): Configuration file does not specify default realm - while attempting to retrieve default realm
#           krb5kdc: Configuration file does not specify default realm, attempting to retrieve default realm
#
#   16. Values in kerberos are generally overridden, meaning, if you redecalare the same variable, it will delete the value of the
#       last instance, which may be the default. That is not true for `default_realm`. If you
#            [libdefaults]
#               dns_lookup_realm = false
#               pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt
#               ...
#               default_realm = EXAMPLE.COM
#               default_realm = FOO.BAR
#
#       the 'FOO.BAR' realm will get ignored and `/usr/sbin/krb5kdc` will only complain about the EXAMPLE.COM realm, even in a
#       multi-realm configuration
#
#
#   [1] Why `-n` ? Because Kerberos.
#
#########################################################################
# 4.2 COMMENT PLACEMENT AND INDENTATION
#########################################################################
#
#   1.  Whitespace (spaces or tabs) does not matter. Use as much as you want.
#
#   2.  Empty sections are ok:
#           [kdcdefaults]
#
#           [dbdefaults]
#
#       They will take on any missing default values, but you can def have empty sections.
#
#   3.  You can have a named OTP section like this:
#
#       [otp marsel.is]
#
#   4.  On the other hand, comment placement matters. A LOT. Let us go through some examples
#       where it is ok to comment
#
#       # this comment is ok
#       [realms]
#       # this comment is also fine
#           # also this comment is fine as well
#       TEST.REALM = {
#           master_key_type         = aes256-cts-hmac-sha384-192
#           # same here
#           database_module         = db2_test.realm
#           admin_keytab            = /var/kerberos/krb5kdc/test.realm.is-kadm5.keytab
#           acl_file                = /var/kerberos/krb5kdc/test.realm-kadm5.acl
#           dict_file               = /var/kerberos/krb5kdc/test.realm-kadm5.dict
#           key_stash_file          = /var/kerberos/krb5kdc/.k5.TEST.REALM
#       } # This comment is also ok
#
#       These are the only safe locations: comments starting from the beginning of the line,
#       on their own, with the single exception of the closing bracket. I use that to indicate
#       the end of the realm
#
#       Comments are not safe after any file path, boolean value or FILE:/DIR; descriptor.
#           db_library           = db2 # comment will be parsed along with db2 and kerberos will look for the "db2 # comment will be parsed along.." .so
#           database_name        = /var/kerberos/krb5kdc/principal.marsel.is # comment is parsed inline with the filepath resulting in "file not found"
#           disable_last_success = true # comments are not safe after bool value
#           pkinit_identity      = FILE:/etc/pki/tls/certs/kdc.pem,/etc/pki/tls/private/kdc.key # this comment is passed as a file path
#       
#       you would think this would lead to some nasty stack overflows, but apparently the Kerberos
#       parser  is at least that much resilient: I inserted a control+v,control+@ sequence 8192010
#       times into a file path, about 8MB and the parser basically chopped off the rest of the
#       string after the filepath. At least, that is something.
#
##########################################################################
# 4.3 TERMINOLOGY ( especially the kind that appears once and then never seen again )
#########################################################################
#
#   SERVICE PRINCIPAL NAME (SPN)
#       An SPN (Service Principal Name) is the unique Kerberos name for a service, like host/foo@REALM.
#
#
#
##########################################################################
# 4.4 OPTIMISTIC CHALLENGE
##########################################################################
#
#   "Optimistic challenge" is a feature of Kerberos 5: the KDC will try to send preemptively send a pre-authentication challenge
#   to a client, before the client requests or responds with any credentials. This is done via the SPAKE protocolr, assuming the
#   client supports it. By using the optimistic challenge, we are trying to avoid extra round-trips.
#
#   SPAKE (Simple Password Exponential Key Exchange) is a pre-authentication mechanism in Kerberos that improves
#   security by preventing password brute-force attacks while allowing password-based authentication. 
#   `spake_preauth_kdc_challenge controls` whether the KDC will try to send preemptively send a pre-authentication challenge
#   assuming the client supports it, to avoid extra round-trips. That's called "optimisticic challenge".
#   This can speed up authentication but may expose unnecessary data if the client does not support SPAKE. The value set here
#   must match one of the available SPAKE groups defined in `spake_preauth_groups` under [libdefaults]. Possible values include:
#   edwards25519, p256, p384, p521, ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, and ffdhe8192. 
#   If not set, the KDC does not issue an optimistic challenge by default.
#
#   The algorithms used in spake are ellipptic algorithms and they are defined in RFCs:
#   +---------------+-----------------------------------------+
#   | Algorithm     | Description                             |
#   +---------------+-----------------------------------------+
#   | edwards25519  | Edwards25519 curve (RFC 7748)           |
#   | P-256         | NIST P-256 curve (RFC 5480)             |
#   | P-384         | NIST P-384 curve (RFC 5480)             |
#   | P-521         | NIST P-521 curve (RFC 5480)             |
#   +---------------+-----------------------------------------+
#
#   top is weakest, bottom one is strongest.
#
##########################################################################
# 4.5 CONSTRAINED DELEGATION
#########################################################################
#
#   Constrained Delegation is a Microsoft Kerberos extension that allows a service to act on behalf of a user, but
#   only to specific backend services explicitly allowed by AD policy. Unlike traditional delegation, which forwards
#   the full TGT of the user, constrained delegation does not give the service unrestricted access — it can only request
#   service tickets for defined services using the identity of the user. The credentials of the user never leave the KDC.
#
#   This solves the problem of limiting trust: instead of trusting a front-end (e.g., a web server) to act as the
#   user everywhere, the service can be configured via AD to allow access only backend services like a database or file
#   share. AD configures the web service account to limit where it can delegate. The web service itself is not aware of
#   the restriction, it is the KDC which enforces it, by conditionally issuing service tickets. When the web service
#   requests a ticket on behalf of a user, the KDC checks: 
#       1. Is ok-to-auth-as-delegate set on the service principal?
#       2. Is the target Service Principal Name (SPN) allowed in AD delegation policy for that service account?
#   If not, the KDC refuses the ticket and no delegation happens. The KDC sets ok-as-delegate in the returned ticket only
#   if both checks pass.
#       Introduced in Windows Server 2003, it is widely used in AD environments in AD environments via Group Policy or
#   Active Directory Users and Computers — a GUI tool in Windows for managing AD objects. On Linux, it is rarely used
#   outside of AD integration.
#
#   It is also not-so-accuratelly named. It should had been called "scoped impersonation"
#
#   Service for User (S4U) is a is a Microsoft Kerberos protocol extension backported into the MIT Kerberos distribution
#   that enables a service to obtain Kerberos tickets on behalf of a user without requiring the credentials of the user
#   directly. It is made up from two parts:
#
#   * 4.5.1 Service for User to Self (S4U2Self)
#        A sub-protocol of S4U that allows a service to request a service ticket to *itself* on behalf of a user.
#        This provides user identity verification when the user did not directly authenticate with Kerberos.
#
#   * 4.5.2 Service for User to Proxy (S4U2Proxy)
#        Allows a service to obtain a service ticket on behalf of a user, without needing the credentials
#        of afformentioned user. It enables constrained delegation:
#           * User authenticates to Service A.
#           * Service A uses S4U2Proxy to get a ticket to Service B as the user.
#           * Service B sees the user's identity, but user never contacted Service B directly.
#        Requires:
#           * ok-to-auth-as-delegate set on user's ticket ( default_principal_flags = +ok-to-auth-as-delegate ) on the client.
#           * ok_as_delegate set on Service A's key ( default_principal_flags = +ok_as_delegate) on the intermediate server.
#           * In AD, there is a separate AD-side config that whitelists principal delegation policy. No such thing in MIT Kerberos.
#             If the flags are set on the principals, it works. Nothing more needed.
#
#       Together, they allow protocol transition (S4U2Self) and constrained delegation (S4U2Proxy). AD uses both as part of Kerberos
#       delegation flow.
#
#   WHERE IS IT USED
#       * Microsoft AD (default)
#       * MIT Kerberos (partial; no delegation policy enforcement)
#       * RFC 6806 specifies the extensions.
#
#   EXAMPLES
#       Windows (AD):
#           1. IIS with Kerberos delegation: A web server impersonates a user to access a backend SQL Server.
#           2. Exchange Server: Authenticates a user via Outlook Web Access and accesses mailboxes on behalf of the user.
#           3. Remote Desktop Gateway: Authenticates with S4U2Self, then uses S4U2Proxy to delegate to the remote session host.
#           4. Sharepoint: Web server that grabs files from a windows share/fileserver
#       Linux (MIT Kerberos):
#           1. Apache with mod_auth_kerb: Uses S4U2Proxy to access backend services (e.g. LDAP) after authenticating a user.
#           2. GSS-Proxy with SSH or sudo: Performs S4U2Self to act on behalf of a local user with Kerberos credentials.
#           3. FreeIPA HBAC or sudo rules: Uses S4U2Proxy to perform authorization checks against LDAP as the user.
#
##########################################################################
# 4.6 KERBEROS STORAGE BACKENDS
##########################################################################
#
#   Kerberos needs a storage backend to store and/or retrieve principals. That can be: 
#       * A db2 database
#       * LDAP
#       * kldap — LDAP backend for the Heimdal implementation
#   The database_module variable is a pointer to a label within the [dbmodules] section.  It acts as an indirect reference rather
#       than directly specifying the database library. Why? Cuz someone in the 1980s thought "that belongs in its own section", rather
#       than directly inserting the reference there
#       So, you will see a label here; it may be named
#           * LDAPsomething
#           * DB2something
#           * REALMsomething
#        or * ANYTHING_REALLY
#     It is not a real definition. It is a pointer in the [dbmodules] section. You will look this label up in [dbmodules] and see what
#     actually backend it may be using. Naming this label appropriately is only up to the kindness and thoughfulness of the person writing
#     this configuration section. Do not trust what you see, cuz it may end up that LDAP_BACKEND, for example, may be using db or something
#     else. 
#     The default location for all databases is /var/kerberos/krb5kdc/
#     If database_module is not specified, Kerberos/the KDC daemon defaults to creating a DB2 database backend for use, named after the
#     realm, i.e. /var/kerberos/krb5kdc/<realm>.db
#     If the appropriate labeled  section is missing, Kerberos will apply the default database settings.
# 
#     Note: If the [dbmodules] section named in database_module is missing, the KDC daemon will use the default values for all database
#         variable settings
#     Note: This was more convoluted that it needed to be
#
#   database_module = LDAP_BACKEND
#   database_module = DB2_BACKEND
#   database_module = EXAMPLE.COM
#   database_module = SUPERCALIFRAGILISTICEXPIALIDOCIOUS
#   database_module = marvin_the_paranoid_android
#
#       +--------------------------------+--------+--------+--------+
#       | Feature                        | LMDB   | DB2    | LDAP   |
#       +--------------------------------+--------+--------+--------+
#       | External management            | No     | No     | Yes    |
#       | Multi-master replication       | No     | No     | Yes    |
#       | Backend included in MIT distro | Yes    | Yes    | No     |
#       | Requires external service      | No     | No     | Yes    |
#       | Manual schema extension        | N/A    | N/A    | Yes    |
#       | User account sync              | No     | No     | Yes    |
#       | Fine-grained ACLs              | No     | No     | Yes    |
#       | Performance (read)             | High   | Medium | Medium |
#       | Performance (write)            | High   | Medium | Low    |
#       | Ease of setup                  | Easy   | Easy   | Hard   |
#       | Suitability for clustering     | No     | No     | Yes    |
#       +--------------------------------+--------+--------+--------+
#
#       1.  "External management" means principal data (users, keys, policies) can be managed using tools outside Kerberos—e.g., ldapmodify, ldapsearch,
#               or GUI LDAP tools. Only applies to LDAP backend.
#       2.  Multi-primary replication: kpropd only supports one-way replication (primary → secondaries). LMDB and DB2 are file-based; no native multi-primary. LDAP
#               supports multi-primary via its own replication (e.g., OpenLDAP syncrepl).
#       3.  Backend included in MIT distribution: MIT Kerberos ships LMDB and DB2 backends by default—no extra packages. LDAP backend requires compiling with --with-ldap
#               and installing OpenLDAP libs.
#       4.  Requires external service: LMDB and DB2 are file-based; LDAP backend requires an external daemon (slapd).
#       5.  Manual schema extension: LMDB/DB2: fixed structure, no extensibility. LDAP backend uses a schema (objectClasses, attributes)
#       6.  User account sync: Only LDAP allows syncing Kerberos principals with POSIX/UNIX accounts (via uid, userPassword, etc). LMDB/DB2 have no
#               integration—completely separate identity stores.
#       7.  Fine-grained ACLs: LMDB/DB2 use coarse kadm5.acl—principal-based, not attribute-specific. LDAP supports fine-grained access via LDAP ACLs (e.g., per-user/per-attr).
#       8.  Speed matters for large realms (10k+ principals) or high-ticket-issue rates (e.g., clusters, AFS/Kubernetes with lots of short-lived jobs).
#           8.1 LDAP is medium/low because:
#               Reads require socket + protocol overhead.
#               Latency higher than local DB (e.g., LMDB = memory-mapped).
#               Indexed, yes—but not purpose-optimized like LMDB.
#       9.  DB2 uses Berkeley DB: disk-based, locking-heavy, and slower than the memory-mapped model of LMDB. Faster than LDAP, but slower than LMDB due to 
#               log writes and sync operations.
#       10. LMDB is memory-mapped: everything happens in memory and then transactionally stored to disk. 
#       11. Ease of setup: 
#               LMDB:   Easiest: included, minimal config, local-only
#               DB2:    Easy: same tools as LMDB, just older backend
#               LDAP:   Hard: external slapd, schemas, ACLs, SASL/EXTERNAL (another 400 pages to read: oreilly and packt)
#       12. Suitability for clustering: 
#               LMDB/DB2: single primary only, no real-time sync; not suitable for active-active. LDAP supports multi-primary and centralized identity across KDCs, ideal for
#               fault tolerance and primary clustering.
#
##########################################################################
# 4.7 CONFIGURATION DEPENDENCIES AND IMPLICIT CONSTRAINTS
##########################################################################
#
#   Some configuration options are only meaningful when other parameters are set.
#   This section documents such implicit dependencies to avoid misconfiguration.
#
#   1.  pkinit_anchors           ⟶  requires pkinit_kdc_identity
#   2.  pkinit_revoke            ⟶  requires pkinit_kdc_identity
#   3.  pkinit_eku_checking      ⟶  requires pkinit_kdc_identity
#   4.  otp_*                    ⟶  needs OTP plugin loaded via plugin modules
#   5.  radius_*                 ⟶  needs OTP plugin + radius server configured
#   6.  kdc_default_keys         ⟶  relevant only if default_keys not set per-principal
#   7.  iprop_slave_poll         ⟶  requires iprop_enable = true
#   8.  iprop_*                  ⟶  only for iprop mode (master/slave setup)
#   9.  database_module          ⟶  must match a defined [dbmodules] section
#   10. db_library               ⟶  must be present and valid in [dbmodules]
#   11. acl_file                 ⟶  required if using kadmind with LMDB/DB2
#   12. disable_last_success     ⟶  only applies if last_success tracking is enabled
#   13. supported_enctypes       ⟶  must match keytab/principal types or auth fails
#
##########################################################################
#  4.8 KEYSALT LISTS AND KEYSALTS IN KERBEROS
##########################################################################
#
#    Kerberos creates its user keys from passwords using a "keysalt list". A keysalt list consists of the name of an encryption algorithm type and
#    a salt type, in the format of `encryption:salt` pairs. Each pair specifies how to create a key from a password by using the algorithm and using
#    specified salting method. Multiple pairs are separated by spaces or commas. Available encryption types are all the algorithms discussed
#    in FURTHER DISCUSSION: 4.9 MASTER KEY ALGORITHMS below.
# 
#    Here is an example value:
#        supported_enctypes = aes256-cts:normal,aes128-cts:normal 
#    This tells Kerberos to generate keys for the AES256 and AES128 encryption types using normal salting, meaning use the principal and the realm name
#    as salt.
#    Salts are used to make sure users who pick the same password get different keys. Salt types include:
#        * normal: default, uses the principal and realm as salt
#        * norealm: uses only the principal as salt, no realm),
#        * onlyrealm: uses the realm only
#        * special: generates a random salt
#
###########################################################################
# 4.9 MASTER KEY ALGORITHMS
##########################################################################
#
#   Here is a table with all the master key values accepted for `master_key_type`. The columns are Primary Name for the algorithm or the family of algorithms,
#   any aliases the variable accepts, a short explation of what the algorithm is and the current accepted strength of the algorithm againstr decrypting it.
#   The Primary Name, in the fashion of MIT Kerberos may or may not be explicit value of the algorithm used, but you can also pass the family alias and Kerberos
#   will pick up the strongest available. The alias which can be used as short hand. Family aliases do not have a shorthand. 
#
#   +------------------------------+---------------------------------------------+----------------------------------------------+-----------------------+
#   | Primary Name                 | Aliases                                     | Explanation                                  | Strength/Status       |
#   +------------------------------+---------------------------------------------+----------------------------------------------+-----------------------+
#   | aes256-cts-hmac-sha1-96      | aes256-cts, aes256-sha1                     | AES-256 CTS mode with 96-bit SHA-1 HMAC      | strong                |
#   | aes128-cts-hmac-sha1-96      | aes128-cts, aes128-sha1                     | AES-128 CTS mode with 96-bit SHA-1 HMAC      | medium                |
#   | aes256-cts-hmac-sha384-192   | aes256-sha2                                 | AES-256 CTS mode with 192-bit SHA-384 HMAC   | _strongest_           |
#   | aes128-cts-hmac-sha256-128   | aes128-sha2                                 | AES-128 CTS mode with 128-bit SHA-256 HMAC   | strong                |
#   | arcfour-hmac                 | rc4-hmac, arc-four-hmac-md5                 | RC4 with HMAC/MD5 (deprecated)               | weak, deprecated      |
#   | arcfour-hmac-exp             | rc4-hmac-exp, arc-four-hmac-md5-exp         | Exportable RC4 with HMAC/MD5 (weak)          | very weak, deprecated |
#   | camellia256-cts-cmac         | camellia256-cts                             | Camellia-256 CTS mode with CMAC              | strong                |
#   | camellia128-cts-cmac         | camellia128-cts                             | Camellia-128 CTS mode with CMAC              | medium                |
#   |                              |                                             |                                              |                       |
#   # ALIASES FOR FAMILIES         #                                             #                                              #                       #
#   | aes                          | family alias for: aes256-cts-hmac-sha1-96,  | AES family alias, kerberos will pick         | mixed, depends on     |
#   |                              | aes128-cts-hmac-sha1-96, aes256-cts-hmac-   |  the strongest available on the machine      |  algorithm            |
#   |                              | sha384-192, aes128-cts-hmac-sha256-128)     |                                              |                       |
#   | rc4                          | arcfour-hmac                                | RC4 family alias                             | weak, deprecated      |
#   | camellia                     | camellia256-cts-cmac, camellia128-cts-cmac  | Camellia family alias, kerberos will pick    | mixed, depends on     |
#   |                              |                                             |  the strongest available on the machine      |  algorithm            |
#   +------------------------------+---------------------------------------------+----------------------------------------------+-----------------------+
#
#   The MIT Kerberos has more f̶u̶c̶k̶e̶r̶y̶syntactic sugar than needed, for this variable. There is a final value called "DEFAULT". If you see that or any string
#   that includes it, remove it and put the explicit value on it. Do not bother with it, as it is preferred to know in advance if the machine does not have
#   the algorithm library set, so it can be fixed: you mix algorithms you gonna have a bad, bad, bad time chasing down the error.
#
#   NOTE:
#   Disabling weak algorithms allows Kerberos to be FIPS compatible: FIPS is the system-wide enforcement of FIPS 140-2 cryptographic standards (U.S. federal
#   certification). Only strong, validated algorithms (e.g., AES, SHA-2) are allowed. Weak algorithms (RC4, DES) must be disabled. Linux distros like
#   RHEL/Fedora can force FIPS mode at boot. See 
#       https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/security_hardening/switching-rhel-to-fips-mode_security-hardening
#   for more info.
#
##########################################################################
# 4.10 PROPER PRE-AUTH METHODS
##########################################################################
#
#   Proper pre-auth methods include:
#       * Encrypted timestamp: Most common, password-based.
#       * PKINIT: Certificate/smartcard-based.
#       * OTP: One-time password.
#       * FAST armor tickets: Tunnel pre-auth.
#
#   The reason for all these are to prove the identity of the user/client before the KDC issues a ticket. Saves a round trip or two at the ol' VAX.
#
#########################################################################
# 4.11 PKINIT
##########################################################################
#   PKINIT
#       The PK options should had been very well explained in the ma page.
#       Instead, they are placed as an aftethought in the [realms] (realm-specific)
#       or [kdcdefaults] as globals, with little or none explanation.
#       Why are they at the end of the man page instead of having their
#       own subsection in those respective sections?
#           Because the man page structure is a disorganized mess.
#           PKINIT was bolted on later, so its options were dumped 
#           at the end instead of integrated logically.
#           Classic case of "append, do not refactor".
#
#   WHAT IS PKINIT:
#       Public Key Cryptography for Initial Authentication ( PKINIT ) replaces
#       the password of the user in Kerberos with X.509 certificate-based auth.
#       User proves identity via private key tied to a trusted cert; KDC
#       validates it via trusted anchors[1]. 
#
#       To put it more plainly: PKINIT most times is a password alternative, not
#       MFA by itself: It replaces password-based authentication with certificate
#       -based auth. It can be part of MFA, if combined with something else (e.g.
#       smartcard + PIN). Since Kerberos supports stacking multiple preauthentication
#       mechanisms, using a mechanism that incorporates a cert (PKINIT) +  password
#       (encrypted challenge) + OTP (RADIUS) can lead to a full MFA solution.
#       A complete solution uses at least two forms of factor authentication from these
#       different categories:
#           * Something you have (cert, token, smartcard)
#           * Something you know (password, PIN)
#           * Something you are (biometrics)
#
#       Used for smartcards, HSMs or cert-based login.
#
#       [1] Trusted anchor: a root CA certificate the KDC uses to validate client cert chains.
#           If a client cert chains up to this anchor, the KDC considers it trusted.
#           It is specified via `pkinit_anchors`. More below.
#
#       If <name> (the subsection name) is not defined, the plugin cannot
#       resolve the socket path.
#       OTP preauthentication fails immediately. There is NO fallback.
#
#   TO TEST IF NAMED OTP SECTIONS WORK:
#       Create an [otp] subsection without a name, like just [otp] alone.
#       Leave out server explicitly.
#       Try kinit with OTP preauth—
#       You should get an immediate preauth failure error.
#
##########################################################################
#   4.12 WHAT COMMAND LINE TOOLS MAKE UP MIT KERBEROS
##########################################################################
#
#   The MIT kerberos is made out of these tools:
#       * /usr/bin/kadmin:              The Kerberos command-line tool for administering the KDC database (create, modify, delete principals, etc.), via `/usr/sbin/kadmind`.
#       * /usr/sbin/kadmin.local:       The same utility as above, but admins a DB2 principal database directly, instead of using kadmind, cuz evolution had not figured out 
#                                       the chicken and egg problem, yet.
#       * /usr/bin/kinit:               Auth into kerberos, so you can get a TGT.
#       * /usr/bin/kdestroy:            Destroy your TGT cache.
#       * /usr/bin/klist:               List your TGT cache.
#       * /usr/bin/kpasswd:             Change the Kerberos password of a user.
#       * /usr/bin/ksu:                 /usr/bin/su that supports kerberos.
#       * /usr/bin/kswitch:             Switch the primary ticket cache for the user, essentially allowing you to separate credential caches.
#       * /usr/sbin/kdb5_util:          kdb5_util allows an administrator to perform maintenance procedures on the KDC database. It does not manage the principals themselves.
#       * /usr/sbin/kdb5_ldap_util:     Command-line tool to manage the LDAP Kerberos database backend: create, modify, destroy realms and entries in LDAP. LDAP equivalent of kdb5_util. 
#       * /usr/sbin/kbr5kdc:            The Kerberos Domain Controller daemon
#       * /usr/sbin/kprop:              Client that pulls replication data from `/usr/sbin/kpropd`
#       * /usr/sbin/kpropd:             The Kerberos replication server.
#       * /usr/sbin/kproplog:           Displays the contents of the KDC database update log to standard output.
#       * /usr/bin/k5srvutil:           Manage service keytabs on the host (e.g. rotate, list, delete)  via the KDC (needs running `/usr/sbin/krb5kdc`)
#       * /usr/bin/ktutil:              Edit keytab files locally - no network, no Kerberos needed. Useful for when you need to manually build or fix keytabs, the KDC is not available,
#       * /usr/bin/kvno:                Used to verify which key version a KDC issues for a principal—helps detect keytab mismatch or outdated keys during auth or ""we did not implement
#                                       key fingerprinting so we made a dump decision to use increments for versioning so we need a tool to tell if we f'ed up"
#
#   Misc:
#       * /usr/bin/krb5-config:         ldconfig tool for kerberos, ignore unless you are compiling against a Kerberos installation that was installed in a non-standard location.
#       * /usr/sbin/sserver:            Sample kerberos server app, used for testing. Issues kerberos 5 tickets but does nothing useful with them.
#       * /usr/bin/sclient:             Sample kerberos client app, used for testing. Used in conjunction with `/usr/sbin/sserver`.
#
##########################################################################
#   4.13 UNDOCUMENTED FEATURES OF USING SAID TOOLS
##########################################################################
#
#   /usr/bin/kadmin:
#   /usr/sbin/kadmin.local:
#       These are the same tool, and really the top one should just have a --local/-l flag. The .local tool allows you to edit the Kerberos database without having a daemon running.
#       Anyone can run `/usr/bin/kadmin` but it will ask you for a password for any admin principal you have set in the ACL file. To run the .local tool, you still have to have an
#       admin principal but you also have to be root. By default, the admin principal will be your user + /admin @YOUR.REALM . So for me it will be george/admin@MARSEL.IS . But as
#       long as you got the ACL configured it could be zaphod/beeblebrox@MAGRATHEA , as far as Kerberos is concerned.
#       Your password will be either prompted or automatically be read in your TGT user cache, usually in /tmp/krb5_$uid.
#       `/usr/bin/kadmin` can run either interactively or with quoted one-liner queries of commands (see more below).
#
#       For all intended puproses `/usr/bin/kadmin -q 'command'` and `/usr/bin/kadmin command` are the same thing but up at MIT they have not
#       discovered how to quote and escape, yet.
#
#       Usage:
#           /usr/bin/kadmin -r REALM -p principal [ -k [-t /path/to/keytab] | -c /path/to/credentials_cache | -n ] -w password -q 'query command' -d /path/to/not/ldap/database -s kadmin_server[:port] -e enctype:salt[:iter] [-O|-N] -x attr=value [the same command as -q but now at the end of the command]
#
#           2025-06-29:     And here is where I need to pop one more Lorazepam: AN ENTIRE FEATURE OF KERBEROS, NOT DISCUSSED IN THE DOCUMENTATION OR ANYWHERE
#                           ELSE IN THE MAN PAGES: -n : anonymous processing. IT HAS ITS OWN FUCKING RFC: https://www.rfc-editor.org/rfc/rfc6112.txt
#                           JUST QUIETLY STASHED IN A SINGLE FUCKING PARAGRAPH IN A FUCKING MAN PAGE. JESUS CHRIST ON A POGO STICK!
#           #######################################################
#           # 4.13.1 WHAT IS ANONYMOUS PROCESSING?
#           #######################################################
#           #   Anonymous Kerberos, as defined in RFC 6112, allows a client to authenticate to a service without revealing the user identity of the client via their
#           #   Kerberos principal name. The client obtains a TGT as WELLKNOWN/ANONYMOUS@REALM, which is a special principal that does not map to any real user account.
#           #   This is useful in scenarios where access must be controlled (e.g. via ACLs), but privacy must be preserved. Imagine a public Windows terminal querying
#           #   Active Directory services ( e.g. pulling a list of printers or querying a certificate authority ) without logging in. Normally this requires a a known
#           #   authenticated principal but with anonymous Kerberos, the client proves it is part of the domain ( has a shared key with the KDC ) without saying who it
#           #   is. The KDC issues a TGT for the anonymous identity and then service tickets for limited-access services that allow anonymous access. This is distinct
#           #   from unauthenticated access: It is still secure, uses Kerberos exchanges and can be audited, but does not leak user identity, because there no user
#           #   principal (e.g. alice@REALM ) involved. It proves the request came from a trusted source, not who made it: You cannot trace who, only that a valid
#           #   anonymous Kerberos exchange occurred.
#           #   This is very much a fringe case. Used, apparently, for:
#           #   *   Privacy-preserving access to public services (e.g. public LDAP browse)
#           #   *   Bootstrapping trust (e.g. obtaining initial credentials for smartcards or PKINIT without full login)
#           #   *   Some S4U2Self/S4U2Proxy edge flows
#           #   *   PKINIT scenarios without identity disclosure
#           #   *   Services needing anonymous access with auditability
#           #   *   Experimental/federated identity contexts
#           #
#           #   The `WELLKNOWN/ANONYMOUS@REALM` principal is defined in RFC 6111 mentioned above, along with:
#           #   *   Anonymous TGT acquisition flow
#           #   *   Authz-data implications (e.g., AD-INITIAL-VERIFY)
#           #
#           #   Good luck easily finding actual use cases, though.
#
#           -n :    The anonymous processing we just mentioned. it is used instead of -k -t /path/to/keytab or -c /path/to/TGT_user_ccache
#           or
#           -c :    Use the specified credentials_cache
#           -k :    Use an existing keytab. You can specify the keytab with -t
#
#           #######################################################
#           # 4.13.2 -N and -O : kadmin USES RPC OVER IP (I don't like Mondays)
#           #######################################################
#           #
#           #   "Why" you ask? I dunno, probably the maintainer lives in a basement in MIT while working on kerberos, stroking the sides of a mainfraime,
#           #   thinking ASN.1 is a lifestyle choice.
#           #   Which leads us to the next two options: -O and -N  . Let us explain what is going on first:
#           #   The -O and -N options in `/usr/bin/kadmin` relate to how GSSAPI-based authentication is negotiated with the remote `/usr/sbin/kadmind` service. By default,
#           #   `/usr/bin/kadmin` attempts to negotiate using the RPCSEC_GSS RPC authentication flavor, which is the modern, more flexible mechanism for secure RPCs over GSS-API.
#           #   However, older systems (or buggy ones) may only support the older AUTH_GSSAPI flavor. Using -O forces kadmin to skip negotiation entirely and use the old
#           #   AUTH_GSSAPI method directly. This is helpful when talking to legacy servers or debugging protocol mismatches. On the other hand, -N disables fallback: if negotiation
#           #   fails, `/usr/bin/kadmin` will not attempt to silently fall back to AUTH_GSSAPI. This is useful for enforcing strict compliance in environments where you want to
#           #   ensure that only secure, modern RPC mechanisms are in use (e.g., when testing whether RPCSEC_GSS is working correctly). These options are most relevant in mixed
#           #   Kerberos environments (e.g. MIT + Heimdal) or when debugging GSS failures across firewalls, library mismatches or RPC implementations.
#           -O :        Force use of old AUTH_GSSAPI authentication flavor.
#           -N :        Prevent fallback to AUTH_GSSAPI authentication flavor.
#
#
#           /usr/sbin/kadmin.local -r REALM -p principal -d /path/to/not/ldap/database -e enctype:salt[:iter] -m -x attr=value -q 'query command' [same query command as -q but now at the end of the command]
#               -m : prompt for the master password of the kerberos database instead of reading it from a stash file
#
#       It is important to understand that due to the brilliance of the MIT team, there is no unified tool to manage principals, keytabs and ACLs. Rather, `/usr/bin/kadmin.*` deals with
#       principals, `/usr/bin/ktadmin` deals with tabs and you use your favorite editor to edit ACLs and good luck matching and verifying all. It is a real flustercuck! Yay!
#       And if you are wondering why such a fragmentation, go read https://www.amazon.com/UNIX-Philosophy-Mike-Gancarz/dp/1555581234?crid=20UFF6E07L9D . The MIT tools have a
#       strict adherence to this philosophy. Which can serve you well, to be honest, but you also need to see what is "the one thing" at any given time. Critical thiking, ya'll.
#
#       List of query commands:
#           +-----------------------+-----------+------------------------------------------------+
#           | Query Command         | Alias     | What does it do                                |
#           +-----------------------+-----------+------------------------------------------------+
#           | add_principal         | addprinc  | Add a new principal                            |
#           | delete_principal      | delprinc  | Delete an existing principal                   |
#           | modify_principal      | modprinc  | Modify properties of a principal               |
#           | rename_principal      | renprinc  | Rename a principal                             |
#           | change_password       | cpw       | Change a principal’s password                  |
#           | get_principal         | getprinc  | Display info about a principal                 |
#           | list_principals       | listprincs| List all principals                            |
#           | add_policy            | addpol    | Add a new password policy                      |
#           | modify_policy         | modpol    | Modify an existing policy                      |
#           | delete_policy         | delpol    | Delete a password policy                       |
#           | get_policy            | getpol    | Show details of a policy                       |
#           | list_policies         | listpols  | List all defined policies                      |
#           | get_privs             | getprivs  | Show your current admin privileges             |
#           | ktadd                 | xst       | Add principal’s keys to a keytab               |
#           | ktremove              | ktrem     | Remove keys from a keytab                      |
#           | lock                  |           | Acquire exclusive DB lock (dangerous)          |
#           | unlock                |           | Release exclusive DB lock                      |
#           | purgekeys             |           | Remove old retained keys for a principal       |
#           | get_strings           | getstrs   | List string attributes on a principal          |
#           | set_string            | setstr    | Set a string attribute on a principal          |
#           | del_string            | delstr    | Delete a string attribute on a principal       |
#           | list_requests         | lr, ?     | List all available commands                    |
#           | quit                  | exit, q   | Exit the kadmin.local tool (CTRL+D works, too) |
#           +-----------------------+-----------+------------------------------------------------+
#
#   Interactive and non-interactive running move do the same thing. I will give non-interactive one-liners to 
#   cover all bases. We will proceed with the examples, not alphabetically from basic to more complex.
#
#   NOTE: if you think this resembles the Appendix from the O'Reilly book, it does. Difference is, the appendix will not give you examples
#   what to do when `/usr/sbin/sssd` fucks up your tab.
#
#   listprincs
#       /usr/bin/kadmin -r REALM -p principal -c TGT_user_cache -t /path/to/keytab -q 'listprincs [glob-pattern]'
#
#   addprinc
#       /usr/bin/kadmin -r REALM -p principal -c TGT_user_cache -t /path/to/keytab -q 'addprinc [glob-pattern]'
#
#       Here we go with more bullshit: kvno:  A bullshit versioning technique cuz there was, at the time, no other reliable way
#       to tell if the key you got is the key you wanted (e.g. via hashing or crypto tech). A primitive workaround: a dumb counter
#       instead of proper key fingerprinting or negotiation. It sidesteps real key identity verification. And it is still there
#       after 40 years.
#
#       If you work with /usr/sbin/sssd and you get an error about kvno being identical, it means that the sync for the principals
#       from AD got foobared. Do not bother fixing the tab. When kvno gets reused or duplicated, clients often reject the key as
#       replayed/stale.  Unjoin, kdestroy everything, reboot and then rejoin the domain.
#           [*]     technically, you can fix it, but you will be paying the price of Kerberos not using proper fingerprinting, with
#                   your sanity
#   ktutil
#
#       wkt 
#       *****************************************************************************
#       * WARNING:  ALWAYS CLEAR THE KEYTAB FIRST TO AVOID DUPLICATES!
#       *           DUPLICATE ENTRIES IN KERBEROS WILL RUIN YOUR DAY AND
#       *           YOU WILL HAVE TO RESTORE FROM BACKUPS!
#       *****************************************************************************
#       WARNING: wkt ALWAYS APPENDS, NEVER OVERWRITES
#       WARNING: If you instead use wkt to write the keylist to the system keytab directly, it will append the keylist to the existing keytab,
#       creating a mess of duplicate entries which are not easily resolved!
#
#   klist -s: Silent check — exits 0 if valid TGT exists, 1 otherwise. Useful for scripting.
#
#   krb5kdc -T (test mode, not often documented)
#
##########################################################################
# 4.14 EXAMPLES OF MIT KERBEROS TOOL USAGE
##########################################################################
#
#       For all intended puproses `/usr/bin/kadmin -q 'command'` and `/usr/bin/kadmin command` are the same thing but up at MIT they have not
#       discovered how to quote and escape, yet.
#
##########################################################################
# 4.15 GSSAPI
##########################################################################
#
#   ????????????????
#
##########################################################################
# 4.16 COMMAND-LINE <-> CONFIGURATION INTERFACE MAP
##########################################################################
#
#   This section maps each major MIT Kerberos command-line tool to the specific kdc.conf and krb5.conf options that influence its behavior.
#   It answers the question: “Why does this command work (or fail) the way it does?” MIT never published this. You’re not supposed to ask.
#   But every admin needs to know. We explain here what each flag or subcommand interacts with under the hood
#
#=========================================================================
#   kinit
#=========================================================================
# -X X509_user_identity         → [realms] pkinit_identity in /etc/krb5.conf
# -X X509_anchors               → [realms] pkinit_anchors in /etc/krb5.conf
# no args (default realm)       → [libdefaults] default_realm
# preauth required              → [realms] require_preauth, otp, pkinit, etc.
# renewable / forwardable flags → [realms] default_principal_flags in /etc/krb5.conf
#
#=========================================================================
#   kadmin / kadmin.local
#=========================================================================
# addprinc/modprinc             → [realms] default_principal_flags in /etc/krb5.conf
# ktadd                         → keytab location from environment or config
# -x                            → mapped to extended flags in kadm5.acl
# auth                          → depends on ACLs and [realms] admin_server
# -O, -N                        → very poorly documented: internal RPC config path option
#                               → see 4.13.2path option
#
# 'auth' here refers to kadmin authorization: whether the principal is allowed to run the command (e.g. addprinc, modprinc, etc.)
#   which is controlled via kadm5.acl and the presence of [realms] admin_server
#=========================================================================
#   klist
#=========================================================================
# Cache location                → $KRB5CCNAME or default cache type
# PKINIT indicator              → shows anon if anonymous tickets issued
# renewable / forwardable       → shows flags set by default_principal_flags
#
#   PKINIT indicator: It is the IND: string in the ticket flags (e.g. IND:PKINIT), showing PKINIT was used. klist -f displays it.
#
#=========================================================================
#   ktutil
#=========================================================================
# add_entry, write_kt           → No config dependencies
#                               → Depends on selected enctype & key versioning
# Manual tool: backup/repair
#
#   ktutil does not depend on krb5.conf or kdc.conf for its operations. But the enctype and kvno (key version) values you enter must match the actual expectations
#   of the realm. Else, the KDC or services will reject them.
#
#   NOTE: kvno mismatches are a common failure mode after manual repair.
#
#=========================================================================
#   k5srvutil
#=========================================================================
# list, change, delete          → Interacts with service keytabs
#                               → Implicitly requires correct keytab realm,
#                                 which is governed by host realm setup
#
#=========================================================================
#   kdb5_util
#=========================================================================
# create                        → Reads [realms] and [dbmodules] paths
# stash                         → Writes master key file
# dump/load                     → Impacts kprop
# destroy                       → USE WITH CAUTION. Realm and dbmodule linked.
#
#=========================================================================
#   kprop / kpropd
#=========================================================================
# kprop                          → Uses dump from kdb5_util
#                                → Configured via kpropd.acl and kadm5.acl
#                                → Realm config from [realms], dbmodules
# kpropd                         → needs correct ACL + krb5.conf settings
#
#=========================================================================
#   sssd
#=========================================================================
# realm, KDC, admin_server     → [realms] in krb5.conf
# OTP support                  → [otp] in kdc.conf (KDC-side)
# PKINIT support               → [realms] pkinit_identity / anchors
# Fallbacks                    → controlled via krb5.conf failover and sssd.conf
# Keytab usage                 → /etc/krb5.keytab, must align with service principals
#
#=========================================================================
#   gssproxy
#=========================================================================
# allow_system_credentials     → enabled via gssproxy.conf
# service-specific delegation  → requires matching [realms] config + keytab
# krb5_principal, keytab       → must match configured realm + encryption types
# anon fallback                → see kdc.conf [realms] + krb5.conf settings
#
# These tools rely on consistent realms, keytabs, and principal names. Misconfig on one side (e.g. SSSD) will surface as unexplained failure on the other (e.g. GSSAPI).
#
##########################################################################
# 5. NEVER-INCLUDED PROCEDURES (BUT SHOULD HAVE HAD)
##########################################################################
#
#   There are procedures that MIT Kerberos never documented, never automated and never wrapped in tooling. But, every KDC admin will eventually
#   have the dreary task of perfoming. They are critical, low-level recovery and configuration tasks that bridge the gap between theory and production.
#   Ignore them, and your realm dies silently.
#
##########################################################################
# 5.1 HOW TO REBUILD THE DB2/LMDB BACKEND 
##########################################################################
#
#   There are no command-line tools to do this task.
#
#   For DB2:
#       * Rebuild manually with a bigger mapsize:
#           * git add the existing file
#           * Dump the db via `/usr/sbin/kdb5_ldap_util dump /path/to/file`
#           * git move/rename the existing file
#           * Load the dump via `/usr/sbin/kdb5_ldap_util /path/to/file`
#           * Test the new file
#           * git add new file
#           * git commit new file
#           * wait 2 days
#           * git remove old file
#
#   For LMDB:
#       * Adjust mapsize in config.
#       * Restart KDC — LMDB automatically resizes the mapping (no dump/load needed).
#
##########################################################################
# 5.2   HOW TO UNFUCK A KEYTAB
##########################################################################
#
#   5.2.1 IN KERBEROS
#
#   5.2.2 IN SSSD
#
###########################################################################
# 6. EXAMPLE SETUP
##########################################################################
#
# # Example setup includes a short description of the setting
# # Paths reflect the Fedora 41/RHEL 9 distribution.
#
# [kdcdefaults]        # Settings used by the Kerberos V5 library
#
# # Daemon configuration variables
#   kdc_listen                      = 0.0.0.0:88                            # Specify the UDP listening addresses and/or ports for the kdb5kdc daemon,
#   kdc_ports                       = 88                                    # Default UDP port for KDC
#   kdc_tcp_listen                  = 88                                    # Specify the TCP listening addresses and/or ports for the krb5kdc daemon.
#   kdc_tcp_listen_backlog          = 128                                   # The size of the listen queue length for the KDC daemon. The value may be limited by OS settings. Defaults to 5.
#   kdc_tcp_ports                   = 88                                    # Default TCP port for KDC
#   kdc_max_dgram_reply_size        = 4096                                  # Specify the maximum packet size to be sent over UDP. Defaults to 4096 bytes.
#   host_based_services             = host,nfs,ssh                          # List of services which have to accept a kerberos ticket for the connection to succeed.
#   spake_preauth_kdc_challenge     = edwards25519                          # Enables SPAKE-based encrypted challenge preauth for passwordless or resilient login.
#   master_key_type                 = aes256-cts-hmac-sha384-192            # Specify the algorithm to encrypt the kerberos principle database.
#   dict_file                       = /usr/share/dict/words                 # Swear and other simple words that cannot be passwords.
#   default_principal_flags         = preauth                               # Flags this KDC allows in its tickets
#   default_realm                   = EXAMPLE.COM                           # Realm used if none specified
#   #
#   # NOTE: admin_keytab was removed from MIT Kerberos in version 1.18 (February 2020), to avoid any config mismatch between KDC and kadmind
#   # and force a predictable, secured location. The only way to change it now is to either change the service unit and add 
#   #     -k /path/you/want/to/set/it/to/file.keytab to ExecStart .
#   ## admin_keytab                 = /etc/krb5kdc/kadm5.keytab             # Specified the keytab file kadmind used to authenticate admin principals. Deprecated.
#   #
#   supported_enctypes              = aes256-cts-hmac-sha384-192:special aes128-cts-hmac-sha256-128:special     # Enctypes supported by this realm
#   encrypted_challenge_indicator   = pkinit-hw                             # encrypted_challenge_indicator
#
# [dbdefaults]         # Default database settings
#   ldap_kerberos_container_dn      = cn=krbcontainer,dc=example,dc=com     # Default LDAP container DN
#   disable_last_success            = false                                 # Enable tracking of last successful login
#   disable_lockout                 = false                                 # Enable account lockout tracking
#   unlock_interval                 = 0                                     # Lockout reset interval in seconds (0 = manual)
# 
# [realms]             # Per-realm-specific database configuration and settings
#     EXAMPLE.COM = {
#         database_module           = lmdb_example                          # DB module to use for this realm
#         max_life                  = 10h                                   # Max ticket lifetime
#         max_renewable_life        = 7d                                    # Max renewable lifetime
#         master_key_type           = aes256-cts-hmac-sha1-96               # Master key encryption type
#         supported_enctypes        = aes256-cts-hmac-sha1-96:normal        # Enctypes supported by this realm
#         acl_file                  = /var/kerberos/krb5kdc/kadm5.acl       # Path to ACL file
#         dict_file                 = /var/kerberos/krb5kdc/kadm5.dict      # Password dictionary for quality checks
#         key_stash_file            = /var/kerberos/krb5kdc/.k5.EXAMPLE.COM # Stashed master key file
#         host_based_services       = host nfs ssh                          # List of services which have to accept a kerberos ticket for the connection to succeed.
#         kdc_ports                 = 88                                    # Realm-specific UDP port (ignored if not first realm)
#         kdc_tcp_ports             = 88                                    # Realm-specific TCP port (ignored if not first realm)
#         kpasswd_server            = ad0.example.com                       # Active Directory server handling password changes. Ensure port 464 (kpasswd) is reachable.
#         no_host_referral          = true                                  # Disable fallback referrals for host-based service requests
#         restrict_anonymous_to_tgt = true                                  # Limit anonymous access to TGTs only
#         pkinit_anchors            = FILE:/etc/pki/ca-trust/source/anchors/ca.crt              # Trusted CA cert for PKINIT
#         pkinit_identity           = FILE:/etc/pki/krb5kdc/kdc.crt,/etc/pki/krb5kdc/kdc.key    # KDC cert+key for PKINIT
#         pkinit_require_eku        = true                                  # Require correct EKU in cert
#         pkinit_eku_checking       = kpClientAuth                          # Require ClientAuth EKU
#         pkinit_pool               = DIR:/etc/pki/krb5kdc/intermediates    # Intermediate CA store
#         pkinit_revoke             = FILE:/etc/pki/krb5kdc/crl.pem OCSP    # CRL and OCSP revocation checks
#         pkinit_indicator          = pkinit                                # Auth indicator added to tickets if PKINIT used
#         otp_token_type            = otp                                   # Specifies which named [otp] section to use for OTP preauth.
#         disable_last_success      = false                                 # Enable login timestamp tracking for this realm
#         disable_lockout           = false                                 # Enable lockout tracking for this realm
#         unlock_interval           = 0                                     # Lockout auto-reset time in seconds
#
#     } # END EXAMPLE.COM REALM
# 
#     # Example of a more hardened domain, with OTP and replication turned on.
#
#     FOO.COM = {
#         database_module           = ldap_foo                              # DB module for foo.com realm
#         max_life                  = 12h                                   # Max ticket lifetime
#         max_renewable_life        = 10d                                   # Max renewable lifetime
#         master_key_type           = aes256-cts-hmac-sha1-96               # Master key enctype
#         supported_enctypes        = aes256-cts-hmac-sha1-96:normal        # Supported enctypes
#         acl_file                  = /var/kerberos/krb5kdc/foo/kadm5.acl   # ACL file for foo.com
#         default_principal_expiration = 2038-01-19T03:14:07Z               # Default expiration (Y2038 edge case: unix time overflow: some legacy systems may fail past this timestamp.)
#         default_principal_flags   = +preauth,+forwardable,+renewable,+postdateable,-proxiable,-dup-skey,-allow-tickets,-ok-to-auth-as-delegate,-ok-as-delegate,-pwchange-service
#                                                                           #   +preauth: require pre-authentication
#                                                                           #   +forwardable: allow ticket forwarding (needed in many setups)
#                                                                           #   +renewable: allow renewable tickets
#                                                                           #   +postdateable: allow future ticket validity
#                                                                           #   -proxiable: disallow proxying
#                                                                           #   -dup-skey: disallow shared session keys
#                                                                           #   -allow-tickets: prevent initial ticket issuance unless explicitly enabled
#                                                                           #   -ok-to-auth-as-delegate: prevent delegation impersonation; useful mostly in AD
#                                                                           #   -ok-as-delegate: prevent trusting delegation on service side; useful mostly in AD
#                                                                           #   -pwchange-service: disable use of the principal for password changes
#         dict_file                 = /var/kerberos/krb5kdc/foo/kadm5.dict  # Dictionary for password policy
#         key_stash_file            = /var/kerberos/krb5kdc/.k5.FOO.COM     # Stash file for foo.com
#         host_based_services       = host,nfs,ssh                          # List of services which have to accept a kerberos ticket for the connection to succeed.
#         iprop_enable              = true                                  # Enable incremental propagation
#         iprop_listen              = *:754                                 # IP/port where kadmind listens for /usr/sbin/kpropd
#         iprop_slave_poll          = 2m                                    # Poll interval for secondary KDCs to replicate the main KDC
#         iprop_ulogsize            = 1000                                  # Update log size for iprop
#         iprop_port                = 754                                   # Port for iprop (default: 754)
#         iprop_resync_timeout      = 10                                    # Seconds before retrying a failed resync
#         iprop_slave_udp_port      = 0                                     # Disable UDP (prefer TCP)
#         iprop_max_resync_backoff  = 300                                   # Max time to back off after resync failures
#         iprop_resync_backoff      = 2                                     # Initial backoff delay in seconds
#         iprop_logfile             = /var/kerberos/krb5kdc/iprop.log       # Optional: log file for debugging
#         iprop_full_resync         = true                                  # Force full resync on first connection
#         iprop_slave_host          = secondary.foo.com                     # Hostname of secondary KDC server
#         kdc_ports                 = 88                                    # Realm-specific KDC UDP port (ignored cuz Kerberos only acknowledges the first instance of this variable, which is above)
#         kdc_tcp_ports             = 88                                    # Realm-specific KDC TCP port (ignored cuz Kerberos only acknowledges the first instance of this variable, which is above))
#         kpasswd_server            = kadmin.foo.com                        # Kerberos server handling password changes for foo.com
#         master_key_name           = K/M                                   # Principal name for the master key
#         no_host_referral          = true                                  # Disable fallback referrals for host-based service requests
#         restrict_anonymous_to_tgt = true                                  # Limit anonymous access to TGTs only
#         pkinit_anchors            = FILE:/etc/pki/ca-trust/source/anchors/foo-ca.crt                  # Trusted CA for PKINIT
#         pkinit_dh_min_bits        = 2048                                  # Minimum DH key size for PKINIT
#         pkinit_identity           = FILE:/etc/pki/krb5kdc/foo/kdc.crt,/etc/pki/krb5kdc/foo/kdc.key    # PKINIT cert/key
#         pkinit_pool               = DIR:/etc/pki/krb5kdc/intermediates    # Intermediate CA store
#         pkinit_require_crl_checking = if_issuer                           # Enforce CRL checks if CRL URI is present
#         pkinit_require_eku        = true                                  # Require EKU in certs
#         pkinit_require_freshness  = true                                  # Enforce PKINIT freshness token
#         pkinit_eku_checking       = kpClientAuth                          # Check for ClientAuth EKU
#         pkinit_revoke             = FILE:/etc/pki/krb5kdc/foo/crl.pem OCSP# CRL + OCSP checks
#         pkinit_indicator          = pkinit                                # Indicator to assert PKINIT was used
#         otp_token_type            = foo                                   # Specify which named [otp <name>] section to use for OTP preauth.
#                                                                           # [otp foo] is referenced here as simply 'foo'.
#         disable_last_success      = false                                 # Track last success
#         disable_lockout           = false                                 # Track failed logins
#         unlock_interval           = 0                                     # No auto-unlock
#
#     } # END FOO.COM REALM
# 
# [dbmodules]          # Per-database settings
#     lmdb_example = {
#         db_library                = kdb_lmdb                              # LMDB backend driver
#         database_name             = /var/kerberos/krb5kdc/principal       # DB file path
#     }
# 
#     ldap_example                  = {
#         db_library                = kdb_ldap                              # LDAP backend driver
#         ldap_kerberos_container_dn = cn=krbcontainer,dc=example,dc=com    # Base DN for principals
#         ldap_kdc_dn               = cn=kdc-service,dc=example,dc=com      # Bind DN for KDC
#         ldap_kadmind_dn           = cn=admin-service,dc=example,dc=com    # Bind DN for kadmind
#         ldap_service_password_file = /var/kerberos/krb5kdc/ldap_pass      # SASL bind password
#         ldap_servers              = ldap://ldap.example.com               # LDAP URI
#         ldap_conns_per_server i   = 5                                     # Connection pool size
#         ldap_kdc_sasl_mech        = GSSAPI                                # SASL mechanism for KDC
#         ldap_kadmind_sasl_mech    = GSSAPI                                # SASL mechanism for kadmind
#     }
# 
#     db2_example = {
#         db_library                = kdb_db2                               # DB2 backend driver
#         database_name             = /var/kerberos/krb5kdc/db2/principal   # DB path
#     }
# 
#     ldap_foo = {
#         db_library                 = kdb_ldap                             # LDAP backend driver
#         ldap_kerberos_container_dn = cn=krbcontainer,dc=foo,dc=com        # Base DN for principals
#         ldap_kdc_dn                = cn=kdc-service,dc=foo,dc=com         # Bind DN for KDC
#         ldap_kadmind_dn            = cn=admin-service,dc=foo,dc=com       # Bind DN for kadmind
#         ldap_service_password_file = /var/kerberos/krb5kdc/foo/ldap_pass  # SASL bind password
#         ldap_servers               = ldap://ldap.foo.com                  # LDAP URI
#         ldap_conns_per_server      = 3                                    # Connection pool size
#         ldap_kdc_sasl_mech         = GSSAPI                               # SASL mechanism for KDC
#         ldap_kadmind_sasl_mech     = GSSAPI                               # SASL mechanism for kadmind
#     }
# 
#     db2_foo = {
#         db_library                = kdb_db2                               # DB2 backend driver
#         database_name             = /var/kerberos/krb5kdc/foo/db2/principal # DB file path
#     }
# 
# [opt]                # One-time password token settings
#     radius = {
#         server                    = radius.example.com                    # Default RADIUS server if realm omits one
#         secret                    = examplesharedsecret                   # Shared secret for authenticating with the RADIUS server
#         timeout                   = 30                                    # Max wait (in seconds) for all RADIUS request (stupid, but that is life)
#         retries                   = 3                                     # Number of attempts if no response. All attempts must happen within timeout
#         strip_realm               = true                                  # Whether to omit realm in username sent to RADIUS
#         indicator                 = otp                                   # Auth indicator flag added to tickets if OTP preauth succeeds
#     }
#
# [otp foo]]           # One-time password token settings, named section "foo", uses a socket
#     radius = {
#         server                    = /var/kerberos/krb5kdc/foo.socket      # Use UNIX socket instead of network RADIUS. The value is the default one.
#                                                                           #   The whole section here is and example why if you name the section you got to
#                                                                           #   use the socket. Remember if you try to use a socket with naming the section
#                                                                           #   /usr/sbin/krb5kdc will fail to start.
#         secret                    = /var/kerberos/krb5kdc/foo.secret      # Path to file containing the shared secret. Completely optional, as we work via IPC.
#         timeout                   = 30                                    # Max wait (in seconds) for all RADIUS request (stupid, but that is life)
#         retries                   = 3                                     # Number of attempts if no response. All attempts must happen within timeout
#         strip_realm               = true                                  # Whether to omit realm in username sent to RADIUS
#         indicator                 = otp-foo                               # Auth indicator flag added to tickets if OTP preauth succeeds
#     }
# 
# [logging]            # Control how the krb5kdc(8) and kadmind(8) daemons and the kdb5_util(8) perform logging
#     kdc                           = SYSLOG:INFO                           # Log KDC to syslog
#     admin_server                  = SYSLOG:INFO                           # Log kadmind to syslog
#     default                       = SYSLOG:INFO                           # Log everything else to syslog
#     debug                         = true                                  # Enable debugging messages
# 
###########################################################################
# 7. SETUP FOR MARSEL.IS
##########################################################################
[kdcdefaults]

[dbdefaults]

[realms]

MARSEL.IS = {
    master_key_type         = aes256-cts-hmac-sha1-96
    database_module         = db2_marsel.is
    admin_keytab            = /var/kerberos/krb5kdc/marsel.is-kadm5.keytab
    acl_file                = /var/kerberos/krb5kdc/marsel.is-kadm5.acl
    dict_file               = /var/kerberos/krb5kdc/marsel.is-kadm5.dict
    key_stash_file          = /var/kerberos/krb5kdc/.k5.MARSEL.IS
    kadmind_tcp_port        = 749
    max_life                = 12h 0m 0s
    max_renewable_life      = 7d 0h 0m 0s
    kadmind_listen          = kdc.marsel.is:749
    kdc_listen              = kdc.marsel.is:88
    #default_principal_flags = +preauth,+forwardable,+renewable,+postdateable,-proxiable,-dup-skey,-allow-tickets,-ok-to-auth-as-delegate,-ok-as-delegate,-pwchange-service
    # THIS IS INSANE: IF YOU TURN THE SALT TO :special IT IMPLIES that you are disabling password and forcing PKINIT! 
    # WHAT THE FUCKETY FUCK. 
    # * :normal = allow password
    # * :special = disable password, force PKINIT
    # look at src/lib/krb5/krb/preauth2.c] under ENCTYPE_SPECIAL flags. It is implied behavior—not in formal user docs.
    # FUCKING BONKERS
    supported_enctypes      = aes256-cts-hmac-sha1-96:normal
    #pkinit_identity         = FILE:/etc/pki/tls/certs/kdc.pem:FILE:/etc/pki/tls/private/kdc.key
    #pkinit_anchors          = FILE:/etc/pki/tls/certs/pkinit-anchors.pem
    #pkinit_anchors          = DIR:/etc/pki/tls/certs
}

[dbmodules]
   db2_marsel.is = {
        db_library           = db2
        database_name        = /var/kerberos/krb5kdc/principal.marsel.is
        disable_last_success = true
        disable_lockout      = false
    }


#[otp marsel.is]

[logging]
    # Since we are running from systemd, logging to stderr makes more sense
    kdc                           = STDERR
    admin_server                  = STDERR
    default                       = STDERR
    debug                         = true                                  # Enable debugging messages

#
###########################################################################
# STILL MISSING: 
###########################################################################
#
#   No complete working examples per tool (ktutil, kinit, klist, kadmin, kpasswd, kprop, etc.)
#   No multi-realm/cross-realm trust config
#
